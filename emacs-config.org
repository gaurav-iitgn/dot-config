#+TTITLE: Emacs Configuration
# Started from Harry Schwartz's configuration ideas
# https://emacs.readthedocs.io/en/latest/index.html
# Subsequently, I have copied from the config of many persons.

* Initialize package manager
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" .  "https://melpa.org/packages/") t)
(package-initialize)
#+end_src

* Configure =use-package=
This package is used to configure other packages. Installation of this package itself is handled in ~/.emacs itself.
Rest of the packages are managed by =use-package=. The following ensures =use-package= is able to handle things as expected

#+begin_src emacs-lisp
;; Ensure that use-package is installed.
;; If not installed, do so and to initial setup
(when (not (package-installed-p 'use-package))
	(package-refresh-contents)
	(package-install 'use-package))
	
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src


* Define some constants to make life easy later

#+begin_src emacs-lisp
(defconst *sys/gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a Windows system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst *sys/cygwin*
  (eq system-type 'cygwin)
  "Are we running on a Cygwin system?")

(defconst *sys/root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")

(defconst *rg*
  (executable-find "rg")
  "Do we have ripgrep?")

(defconst *python*
  (executable-find "python")
  "Do we have python?")

(defconst *python3*
  (executable-find "python3")
  "Do we have python3?")

(defconst *mvn*
  (executable-find "mvn")
  "Do we have Maven?")

(defconst *gcc*
  (executable-find "gcc")
  "Do we have gcc?")

(defconst *git*
  (executable-find "git")
  "Do we have git?")

(defconst *pdflatex*
  (executable-find "pdflatex")
  "Do we have pdflatex?")
#+end_src


* Information about myself

#+begin_src emacs-lisp
(setq user-full-name "Gaurav Srivastava"
      user-mail-address "it.gaurav@gmail.com")
#+end_src


* UI preferences
** General preferences
Display time in the emacs status bar and set the default character encoding.
#+begin_src emacs-lisp
(display-time-mode)
;;this applies everywhere
(set-language-environment "UTF-8")
#+end_src

Change "yes or no" to "y or n" for faster response.
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Display backtrace on error by default.
#+begin_src emacs-lisp
(setq debug-on-error t)
#+end_src

** Set a different backup directory to prevent cluttering
https://stackoverflow.com/questions/2680389/how-to-remove-all-files-ending-with-made-by-emacs/2680682
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
#+end_src


** Swap cmd and option key on Mac (make cmd the meta key)
https://apple.stackexchange.com/questions/12087/emacs-on-mac-os-x-to-alt-or-command/53551
#+begin_src emacs-lisp
(cond
 (*sys/mac* ; Mac OS X
	(progn
		(setq mac-option-key-is-meta nil)
		(setq mac-command-key-is-meta t)
		(setq mac-command-modifier 'meta)
		(setq mac-option-modifier nil)
		(message "Mac OS X"))))
#+end_src

** Change the color and type of point. Also, stop blinking.
#+begin_src emacs-lisp
(setq evil-emacs-state-cursor '("blue" box)) 
(setq evil-normal-state-cursor '("firebrick" box)) 
(setq evil-visual-state-cursor '("green" box))
(setq evil-insert-state-cursor '("darkgreen" box))
(setq evil-replace-state-cursor '("red" bar))
(setq evil-operator-state-cursor '("red" hollow))
(blink-cursor-mode 0)
#+end_src

** Increase default font size to 11 pt.
- values given are in 1/10 pt; so, for 14pt ==> 140
- this is now set in the .emacs file directly as different machines have different optimal font sizes

#+begin_src emacs-lisp
(set-face-attribute 'default nil :height 110)
#+end_src

** Disable tiny scroll bar of minimuffer window.

#+begin_src emacs-lisp
(set-window-scroll-bars (minibuffer-window) nil nil)
#+end_src


** Highlight the cursor when the window scrolls.

#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :diminish beacon-mode
  :config
  (beacon-mode t))
#+end_src

** Enable modus-operandi theme

#+begin_src emacs-lisp
(when (>= emacs-major-version 26)
  (use-package modus-operandi-theme)
  (load-theme 'modus-operandi t)
)

(print emacs-major-version)
#+end_src

** Line numbers and such.
- Always show line numbers and column numbers by default.

#+begin_src emacs-lisp
(if (>= emacs-major-version 26)
		(global-display-line-numbers-mode)
	  (global-linum-mode)
)

(column-number-mode)
(show-paren-mode 1)
(global-visual-line-mode t)
#+end_src

** Use visual bell (flash the mode line instead of a bell or whole frame).

#+begin_src emacs-lisp
(setq visible-bell nil
      ring-bell-function 'gs/flash-mode-line)
(defun gs/flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+end_src

** Highlight the current line.

#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

** Convert tabs to spaces, reduce default tab width to 2
#+begin_src emacs-lisp
  (setq-default tab-width 2)
	;;(setq tab-width 2)
#+end_src

** Auto-scroll compilation window.

#+begin_src emacs-lisp
  (setq compilation-scroll-output t)
#+end_src

** Set straight the undo and redo functionality in evil.

#+begin_src emacs-lisp
  (use-package undo-tree)
  (global-undo-tree-mode)
  ;; this is for undo and redo in evil
  ;; following works with emacs earlier versions
  (eval-after-load 'evil-maps
    '(progn
      (define-key evil-normal-state-map "u" 'undo-tree-undo)
      (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
     )
  )
#+end_src

** For coloring matching parentheses.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters)
#+end_src

** Line wrap in LaTeX mode.

#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'auto-fill-mode)
#+end_src

** Better scrolling by scrolling only by a line at a time.

#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src
** Spell check enable in text mode
Download hunspell from here: http://wordlist.aspell.net/dicts/
#+begin_src emacs-lisp
	;; spell checker program
	(if *sys/win32*
		(setq ispell-program-name "~/MEGA/hunspell-win32/bin/hunspell")
		(setq ispell-program-name "hunspell"))
;; https://200ok.ch/posts/2020-08-22_setting_up_spell_checking_with_multiple_dictionaries.html
				(with-eval-after-load "ispell"
					;; Configure `LANG`, otherwise ispell.el cannot find a 'default
					;; dictionary' even though multiple dictionaries will be configured
					;; in next line.
					(setenv "LANG" "en_US")
					;; Configure two variants of English.
					(setq ispell-dictionary "en_US")
					;;(setq ispell-dictionary "en_US,en_GB")
					;; ispell-set-spellchecker-params has to be called
					;; before ispell-hunspell-add-multi-dic will work
					;;(ispell-set-spellchecker-params)
					;;(ispell-hunspell-add-multi-dic "en_US,en_GB")

					;; For saving words to the personal dictionary, don't infer it from
					;; the locale, otherwise it would save to ~/.hunspell_en_US
          ;; do this only when this file exists
          (defconst gs-dictionary "~/.hunspell_personal")
          (if (file-exists-p gs-dictionary)
            (setq ispell-personal-dictionary "~/.hunspell_personal")))

	(use-package flyspell
		:ensure t
		:init
		(add-hook 'org-mode-hook
							(lambda () (flyspell-mode t))))

#+end_src


** Set default applications for opening the relevant files
- Within Cygwin, open everything with cygstart.exe
	- It passess it on the Windows and appropriate application is triggered

#+begin_src emacs-lisp
	(use-package dired-open)
	 (if *sys/cygwin*
		 (progn (setq dired-open-extensions
					 '(
							("doc"  . "cygstart")
							("docx" . "cygstart")
							("xls"  . "cygstart")
							("xlsx" . "cygstart")
							("html" . "cygstart")
							("htm"  . "cygstart")
							("pdf"  . "cygstart")
						)
						)
						(setq org-file-apps
					 '(
							(auto-mode . emacs)
							("\\.x?html?\\'" . "cygstart %s")
							("\\.pdf\\'" . "cygstart %s")
						)
						)
			);progn
		);if-cygwin

; disable validation link in HTML export
(setq org-html-validation-link nil)
#+end_src


* Utilities
** Function to reload dot-emacs without closing emacs.
#+begin_src emacs-lisp
(defun gs/reload-dot-emacs ()
  "Save the .emacs buffer if needed, then reload .emacs."
  (interactive)
  (let ((dot-emacs "~/.emacs"))
    (and (get-file-buffer dot-emacs)
         (save-buffer (get-file-buffer dot-emacs)))
    (load-file dot-emacs))
  (message "Re-initialized!"))
#+end_src

** Function to rename the current buffer.
Source: http://www.whattheemacsd.com/.
#+begin_src emacs-lisp
(defun gs/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'."
                   name (file-name-nondirectory new-name)))))))

#+end_src


** Which key
#+begin_src elisp
(use-package which-key
  :ensure t
  :defer 10
  :diminish which-key-mode
  :config
  (which-key-mode 1))
#+end_src


* Enable, disable and configure packages
** To inherit executable paths from Shell
Of course, this will not work for windows.
#+begin_src emacs-lisp
(if (not *sys/win32*)
(progn
	(use-package exec-path-from-shell)
	(exec-path-from-shell-initialize)
))
#+end_src

** Load relevant languages in org babel

#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((python . t))
)
#+end_src

** YASnippet for inserting structured templates

#+begin_src emacs-lisp
(use-package yasnippet)
(require 'yasnippet)
(add-to-list 'yas-snippet-dirs "~/code/dot-config/yas-snippets")
(yas-global-mode 1)
#+end_src


** 's' - string manipulating package

#+begin_src emacs-lisp
(use-package s)
(require 's)
#+end_src

** EVIL -- enable

#+begin_src emacs-lisp
(setq evil-want-integration t)
(setq evil-want-keybinding nil)
(use-package evil)
(require 'evil)
(evil-mode t)
;; Make movement keys behave appropriately when visual-line-mode wraps lines
;; https://stackoverflow.com/questions/20882935/how-to-move-between-visual-lines-and-move-past-newline-in-evil-mode
(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
; Make horizontal movement cross lines                                    
(setq-default evil-cross-lines t)
#+end_src

** ORG -- enable and configure different things

#+begin_src emacs-lisp
(require 'org)
#+end_src

*** set org directory, agenda files etc

#+begin_src emacs-lisp
(defvar gs/org-root-dir (concat gs-mega-dir "/Notes"))
(setq org-directory gs/org-root-dir)
(setq org-agenda-files (list gs/org-root-dir))

;; setup refile to use all agenda files
(setq org-refile-targets
  '((nil :maxlevel . 3)
    (org-agenda-files :maxlevel . 3)))
		
;; enable use of tags from all agenda files
(setq org-complete-tags-always-offer-all-agenda-tags t)
#+end_src

*** setup of inbox and other files, capture templates, etc.

#+begin_src emacs-lisp
(defvar gs/org-inbox-file (concat gs-mega-dir "/Notes/000_Inbox.org"))

;; t is for quick TODO capture
;; 'e' is for email TODO capture and 'r' is for email archive capture (if an email is related to an ongoing issue)
;; Both 'e' and 'r' rely on a browser plugin (GS-ORG-CAPTURE) that copies Email subject and URL for use by the capture template (%x)
(setq org-capture-templates
  '(("t" "Quick Todo" entry (file+headline gs/org-inbox-file "Quick Todos")
		 "* TODO %^{Task}\n" :immediate-finish t)
    ("i" "Thoughts and Ideas" entry (file+headline gs/org-inbox-file "Ideas")
		 "* %^{Idea}\n" :immediate-finish t)
    ("e" "Email Todo" entry (file+headline gs/org-inbox-file "Dump from GMail")
		 "* TODO %x\n")
    ("r" "Email Resource" entry (file+headline gs/org-inbox-file "Dump from GMail")
		 "* %x\n")
    ("m" "Meeting" entry (file+headline gs/org-inbox-file "Meetings")
		 "* %t %?")
	 ))
#+end_src


*** todo states

#+begin_src emacs-lisp
(setq org-todo-keywords 
  '((sequence "TODO(t)" 
              "DOING(g@)"
              "FOLLOWUP(f@)" 
              "DISCUSS(d@)"
							"|"
							"DONE(x@/!)"
							"CANCELLED(c@/!)"
)))
(setq org-todo-keyword-faces
   '(("TODO"     . (:foreground "red" :weight "bold"))
	   ("DOING"    . (:foreground "cyan" :weight "bold"))
	   ("FOLLOWUP" . (:foreground "orange" :weight "bold"))
     ("DISCUSS"  . (:foreground "blue" :weight "bold"))
     ("DONE"     . (:foreground "green" :weight "bold"))
     ("CANCELLED". (:foreground "gray" :weight "bold"))
))
#+end_src

*** Set ORG to be the default major mode

#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
#+end_src

*** Use sticky headers

#+begin_src emacs-lisp
(use-package org-sticky-header
 :hook (org-mode . org-sticky-header-mode)
 :config
 (setq-default
  org-sticky-header-full-path 'full
  ;; Child and parent headings are seperated by a /.
  org-sticky-header-outline-path-separator "/"))
#+end_src

*** For pretty bullets and proportional font sizes

#+begin_src emacs-lisp
(use-package org-bullets
	:init
	(add-hook 'org-mode-hook 'org-bullets-mode))
;; hide slash and stars for italics and bold
(setq org-hide-emphasis-markers t)

;; https://zzamboni.org/post/beautifying-org-mode-in-emacs/
;; proportional font sizes
;;  (let* ((variable-tuple
;;            (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
;;                  ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
;;                  ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
;;                  ((x-list-fonts "Verdana")         '(:font "Verdana"))
;;                  ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
;;                  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
;;           (base-font-color     (face-foreground 'default nil 'default))
;;           (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
;;  
;;      (custom-theme-set-faces
;;       'user
;;       `(org-level-8 ((t (,@headline ,@variable-tuple))))
;;       `(org-level-7 ((t (,@headline ,@variable-tuple))))
;;       `(org-level-6 ((t (,@headline ,@variable-tuple))))
;;       `(org-level-5 ((t (,@headline ,@variable-tuple))))
;;       `(org-level-4 ((t (,@headline ,@variable-tuple :height 0.80))))
;;       `(org-level-3 ((t (,@headline ,@variable-tuple :height 0.90))))
;;       `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.00))))
;;       `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.10))))
;;       `(org-document-title ((t (,@headline ,@variable-tuple :height 1.3 :underline nil))))))

;; enable proportional fonts for org mode
;;(add-hook 'org-mode-hook 'variable-pitch-mode)

#+end_src

*** syntax highlighting in source blocks; disable adaptive indentation

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-adapt-indentation nil)
(setq org-src-preserve-indentation t)
#+end_src


*** use images/screenshots

#+begin_src emacs-lisp
(use-package org-download)
(setq org-startup-with-inline-images t)
#+end_src

*** use evil with org agendas

#+begin_src emacs-lisp
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda() (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

;; RETURN will follow links in orgmode files
(setq org-return-follows-link t)
#+end_src

*** custom functions to handle documents, workflows and book keeping

#+begin_src emacs-lisp
;; suggested by Nicolas Goaziou
;; taken from: https://kitchingroup.cheme.cmu.edu/blog/2013/05/05/Getting-keyword-options-in-org-files/
;; gets value of org keywords like TITLE, DATE, etc.
;; allows any customized #+PROPERTY:value
(defun gs/get-org-kwds ()
  "parse the buffer and return a cons list of (property . value)
		from lines like: #+PROPERTY: value"
  (org-element-map (org-element-parse-buffer 'element) 'keyword
                   (lambda (keyword) (cons (org-element-property :key keyword)
                                           (org-element-property :value keyword)))
  )
)

(defun gs/get-org-kwd (KEYWORD)
  "get the value of a KEYWORD in the form of #+KEYWORD: value"
  (interactive)
  (cdr (assoc KEYWORD (gs/get-org-kwds)))
)

#+end_src


#+begin_src emacs-lisp
(defun gs/open-resource-dir ()
"Opens document resource directory of the current headline within the org file"
  (interactive)
	
	;; obtain the DOCDIR (google / mega / dropbox / nas) from the PROPERTIES
  ;; get the base directory from DOCDIR keyword of the file
  ;; this specifies whether the related documents are on MEGA, Dropbox,
  ;; Google Drive or NAS 
  ;; this keyword is DOCDIR -- must be defined in the PROPERTIES of the headline
  ;;get the identifier for file location
  (setq mydocdirstr (car (org-property-values "DOCDIR")))
  (setq mybasedir gs-google-dir)
  ;;set full base directory depending on the file location identifier
  (cond 
    ((equal mydocdirstr "google")(setq mybasedir gs-google-dir))
    ((equal mydocdirstr "dropbox")(setq mybasedir gs-dropbox-dir))
    ((equal mydocdirstr "mega")(setq mybasedir gs-mega-dir))
    ((equal mydocdirstr "nas")(setq mybasedir gs-nas-dir))
  )
	;; obtain the FIRST tag of the headline
  ;; this should be in the format XXX_Y_Z where X, Y, Z are all numbers (e.g. 405_2_1)
	;; it is assumed that the classified will be the FIRST tag among others for the headine
	(setq mytag (car (org-get-tags)))

	;; replace _ with . to enable mapping with directory names
  (setq mytag (s-replace "_" "." mytag))

  ;; build directory name
  (setq mydir (concat mybasedir "/" mytag "_*"))
	
  ;; expand the wildcard to get full name
	;; file-expand-wildcards returns a list; pick the first element with car
  ;;(setq mydir (file-expand-wildcards mydir))
  (setq mydir (car (file-expand-wildcards mydir)))


  ;; open this directory in a new frame of emacs (within dired)
  ;;(dired-other-frame mydir)

  ;; open this directory with system's file viewer
  ;; replaces spaces with escaped ones for use with system's file viewer
  ;;(if (s-match " " mydir) ;;it should be like this ideally
  (if (and *sys/mac* (equal mydocdirstr "google")) ;this will have a space on Mac
		(setq mydirsys (s-replace " " "\\ " mydir))
		(setq mydirsys mydir)
	)

  ;;on Windows, replace / with \ in filepath before sending it to explorer
  (if *sys/win32*
		(setq mydirsys (s-replace "/" "\\" mydir))
	)
  (shell-command (concat gs-file-manager mydirsys))
)
#+end_src


*** Custom Agenda views and customized behavior
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((agenda ""
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-deadline-warning-days 0)))
          (todo "DOING"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nActive Tasks\n")))
          (todo "TODO"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks to be Planned\n")))
          (todo "FOLLOWUP"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nFollow ups\n")))
          (todo "DISCUSS"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTo be Discussed with someone\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n"))))))
);;setq

(setq org-agenda-todo-ignore-scheduled 'all)
(setq org-agenda-todo-ignore-deadlines 'all)
(setq org-agenda-todo-ignore-timestamps 'all)

#+end_src


** Ledger and its configuration
#+begin_src emacs-lisp
	;; (use-package company)
	;; (use-package company-ledger
	;; 	:ensure company
	;; 	:init
	;; 	(with-eval-after-load 'company
	;; 		(add-to-list 'company-backends  'company-ledger))
	;; 	)

	;; https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money/
	;; https://github.com/yradunchev/ledger
	(use-package ledger-mode)
	(use-package flycheck-ledger  :after ledger-mode)
	(setq ledger-binary-path gs-ledger-executable)
	(add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))
	(add-hook 'ledger-mode-hook
						(lambda ()
							;; (company-mode)
							(setq-local tab-always-indent 'complete)
							(setq-local completion-cycle-threshold t)
							(setq-local ledger-complete-in-steps t)
							)
						)

	;; capture templates for org
  (setq gs-ledger-file (concat gs-mega-dir "/ledger/data/journal.ledger"))
	(setq org-capture-templates
				(append '(("l" "Ledger entries")
									("lc" "SBI Credit Card" plain
									 (file gs-ledger-file)
									 "%(org-read-date) %^{Description}
		Expenses:%^{Account}  %^{Amount}
		Liabilities:CC:SBI
	")
									("lb" "SBI Savings Bank Account" plain
									 (file gs-ledger-file)
									 "%(org-read-date) * %^{Description}
		Expenses:%^{Account}  %^{Amount}
		Assets:Saving:SBIGN
	"))
								org-capture-templates))

#+end_src

** Helm and its configuration
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :bind (("M-x"     . helm-M-x)
  ;;       ("C-x C-m" . helm-M-x)
         ("M-y"     . helm-show-kill-ring)
         ("C-x b"   . helm-mini)
         ("C-x C-b" . helm-buffers-list)
         ("C-x C-f" . helm-find-files)
  ;;       ("C-h r"   . helm-info-emacs)
  ;;       ("C-h C-l" . helm-locate_library)
  ;;       ("C-x r b" . helm-filtered-bookmarks)  ; Use helm bookmarks
         ("C-c f"   . helm-recentf)
         ("C-c j"   . helm-imenu)
  ;;       ("C-c C-r" . helm-resume)
  ;;       :map helm-map
  ;;       ("<tab>" . helm-execute-persistent-action)  ; Rebind tab to run persistent action
  ;;       ("C-i"   . helm-execute-persistent-action)  ; Make TAB work in terminals
  ;;       ("C-z"   . helm-select-action)  ; List actions
  ;;       :map shell-mode-map  ;; Shell history
  ;;       ("C-c C-l" . helm-comint-input-ring)
         )
  :config
  ;; See https://github.com/bbatsov/prelude/pull/670 for a detailed
  ;; discussion of these options.
  (setq helm-split-window-inside-p            t
        helm-buffers-fuzzy-matching           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t)

  (setq helm-google-suggest-use-curl-p t)

  ;; keep follow-mode in between helm sessions once activated
  (setq helm-follow-mode-persistent t)

  ;; Smaller helm window
  ;;(setq helm-autoresize-max-height 0)
  ;;(setq helm-autoresize-min-height 30)
  ;;(helm-autoresize-mode 1)

  ;; Don't show details in helm-mini for tramp buffers
  (setq helm-buffer-skip-remote-checking t)

  (require 'helm-bookmark)
  ;; Show bookmarks (and create bookmarks) in helm-mini
  (setq helm-mini-default-sources '(helm-source-buffers-list
                                    helm-source-recentf
                                    helm-source-bookmarks
                                    helm-source-bookmark-set
                                    helm-source-buffer-not-found))

  ;;(substitute-key-definition 'find-tag 'helm-etags-select global-map)
  ;;(setq projectile-completion-system 'helm)

)
(define-key evil-ex-map "b" 'helm-buffers-list)
(helm-mode 1)
#+end_src


** Matlab 
#+begin_src emacs-lisp
;;(use-package matlab-mode)
	(autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
	(add-to-list
	 'auto-mode-alist
	 '("\\.m$" . matlab-mode))
	(setq matlab-indent-function t)
	;;tried but doesn't work on windows
	(if *sys/win32*
		(setq matlab-shell-command "C:\\Program Files\\MATLAB\\R2017a\\bin\\MATLAB.exe"))
	(if (or *sys/mac* *sys/linux*)
		(setq matlab-shell-command "matlab"))


#+end_src

** Python configuration
#+begin_src emacs-lisp

(setq python-shell-interpreter "python3")


;(use-package elpy
;  :ensure t
;  :defer t
;  :init
;  (advice-add 'python-mode :before 'elpy-enable)
;	(setq elpy-rpc-python-command "python3")
;)

;; the following has been set as the system variable $WORKON_HOME 
;; (setq elpy-rpc-virtualenv-path "/cygdrive/c/users/gaurav/cyg_python_venv")

(setq python-indent-offset 2)

#+end_src

** Setup language server for relevant ones
#+begin_src elisp
(use-package lsp-mode)
(require 'lsp-mode)
(add-hook 'go-mode-hook 'lsp-deferred)
; install server: go get golang.org/x/tools/gopls@latest
(add-hook 'sh-mode-hook 'lsp-deferred)
; install server: npm i -g bash-language-server (after brew install npm)
(add-hook 'python-mode-hook 'lsp-deferred)
; install server: pip3 install python-language-server[all]
#+end_src
** Yaml
#+begin_src elisp
(use-package yaml)
(use-package yaml-mode)
#+end_src
** Go language setup
http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/
#+begin_src elisp
(use-package go-mode)

;(setenv "GOPATH" (concat gs-mega-dir "/bin/go"))
(setenv "GOPATH" "/Users/gaurav/go")
(require 'flycheck)
(global-flycheck-mode 1)
;
;; for appropriate formatting
(defun my-go-mode-hook ()
  ; Call Gofmt before saving                                                    
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Godef jump key binding                                                      
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
  (auto-complete-mode 1)
	; Customize compile command to run go build
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v && go test -v && go vet"))
  )
(add-hook 'go-mode-hook 'my-go-mode-hook)

#+end_src


** Evil Collection (for key bindings in most places)
- This one had some error when trying to install with command line
- Installed from list-packages instead. This worked on linux system (not working on Windows).

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src

** Deft
- following is for configuring deft mode
- key to launch deft; disable evil in deft mode

#+begin_src emacs-lisp
(use-package deft
  :bind ("C-c n" . deft)
  :commands (deft)
  :config
  (setq deft-directory (concat gs-mega-dir "/Notes")
        deft-extensions '("org" "md" "txt")
        deft-default-extension "org"
        deft-recursive t
        deft-use-filename-as-title t
        deft-use-filter-string-for-filename t)
  (evil-set-initial-state 'deft-mode 'emacs))
#+end_src

** AUCTEX / LATEX - needs revamping
- following if for latex: auctex
- taken from: https://tex.stackexchange.com/questions/461851/sumatra-pdf-forward-and-inverse-search-emacs

#+begin_src emacs-lisp
(setq TeX-PDF-mode t)
(setq TeX-source-correlate-mode t)
(setq TeX-source-correlate-method 'synctex)
(setq TeX-view-program-list '(("Sumatra PDF" ("\"C:/Program Files/SumatraPDF/SumatraPDF.exe\" -reuse-instance" (mode-io-correlate " -forward-search %b %n ") " %o"))))
(eval-after-load 'tex
 '(progn
   (assq-delete-all 'output-pdf TeX-view-program-selection)
   (add-to-list 'TeX-view-program-selection '(output-pdf "Sumatra PDF"))))
#+end_src


- following is from: https://william.famille-blum.org/blog/static.php?page=static081010-000413
	
#+begin_src emacs-lisp
;;(custom-set-variables '(TeX-source-correlate-method (quote synctex)) '(TeX-source-correlate-mode t) '(TeX-source-correlate-start-server t) '(TeX-view-program-list (quote (("Sumatra PDF" "\"C:/Program Files/SumatraPDF/SumatraPDF.exe\" -reuse-instance %o")))))(custom-set-faces)
;;(eval-after-load 'tex
 ;;'(progn
   ;;(assq-delete-all 'output-pdf TeX-view-program-selection)
   ;;(add-to-list 'TeX-view-program-selection '(output-pdf "Sumatra PDF")))
 ;;)
#+end_src


** org-gcal for Google Calendar integration
https://github.com/kidd/org-gcal.el
https://github.com/mhkc/google-calendar-layer
https://cestlaz.github.io/posts/using-emacs-26-gcal/#.WIqBud9vGAk
#+begin_src elisp
	(use-package org-gcal)
	(require 'org-gcal)
	(setq org-gcal-client-id "295390371627-arqhq3ojngln9l4jqsufg97gm4njbkhi.apps.googleusercontent.com")
	(setq org-gcal-client-secret "Tvc4jv9oJ7ltSxDkHS5adYUH")
	(setq org-gcal-file-alist '(("c_dkuvktbde55novv834t98om1u0@group.calendar.google.com" . "~/MEGA/Notes/google-org-calendar.org")))
	;;(setq org-gcal-file-alist '(("c_dkuvktbde55novv834t98om1u0@group.calendar.google.com" . ((concat gs-mega-dir "/Notes/google-org-calendar.org")))))
#+end_src
For exporting org-agenda to google calendar, C-x C-w to export from agenda; save it as the file being synced with google calendar shown above.
Then run org-gcal-sync

** =paperless= for document filing (mainly papers)
https://github.com/atgreen/paperless
#+begin_src elisp
(use-package ido-completing-read+)
(use-package paperless)
(custom-set-variables
 '(paperless-capture-directory "/Users/gaurav/Google Drive/My Drive/New_System/lit_repo/paperless/downloads")
 '(paperless-root-directory "/Users/gaurav/Google Drive/My Drive/New_System/lit_repo/paperless/filed"))
#+end_src

** =ebib= for bibliography management
https://joostkremers.github.io/ebib/ebib-manual.html
#+begin_src elisp
(use-package ebib)
(use-package helm-bibtex)
(defconst gs-lit-repo (concat gs-google-dir "/lit_repo"))

#+end_src


** =org-ref= for bibliography management
https://github.com/jkitchin/org-ref
https://www.anand-iyer.com/blog/2017/research-literature-management-with-emacs
#+begin_src elisp :tangle no
(use-package org-ref)
(use-package helm-bibtex)
(defconst gs-lit-repo (concat gs-google-dir "/lit_repo"))

;(setq org-ref-bibliography-notes "G:\My Drive\New_System\lit_repo\notes.org"
;			org-ref-default-bibliography '("G:\My Drive\New_System\lit_repo\all_entries.bib")
;			org-ref-pdf-directory "G:\My Drive\New_System\lit_repo\notes.org")

;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "/Users/gaurav/Google Drive/My Drive/New_System/lit_repo/notes.org"
      org-ref-default-bibliography '("/Users/gaurav/Google Drive/My Drive/New_System/lit_repo/all_entries.bib")
      org-ref-pdf-directory "/Users/gaurav/Google Drive/My Drive/New_System/lit_repo")

;following is for helm-bibtex
;	(setq bibtex-completion-bibliography (concat gs-google-dir "/lit_repo/all_entries.bib")
;	      bibtex-completion-library-path (concat gs-google-dir "/lit_repo")
;	      bibtex-completion-notes-path (concat gs-google-dir "/lit_repo/notes.org"))
;
;	;; open pdf with system pdf viewer (works on mac)
;	(setq bibtex-completion-pdf-open-function
;		(lambda (fpath)
;			(start-process "open" "*open*" "open" fpath)))
;
;	;; alternative
;	;; (setq bibtex-completion-pdf-open-function 'org-open-file)


(require 'org-ref)
#+end_src

** Reference management for PDFs using BibTex
- Source: https://ogbe.net/emacs/references.html
The "database" consists of a loose collection of bib files in user-defined directories, a directory containing all pdfs, and a directory containing a notes file <bibtex-key>.org for every entry from all files. This must be set for any of this to work.
#+begin_src elisp
	; Basic data about directories of PDF, BIB, etc.
		(defvar do.refs/db-dirs (concat gs-google-dir "/lit_repo")
			"A list of paths to directories containing all my bibtex databases")

		(defvar do.refs/pdf-dir (concat gs-google-dir "/lit_repo")
			"The path to the directory containing the PDF files. The file
																		for the entry with key <key> is stored as <key>.pdf.")

		(defvar do.refs/notes-dir (concat gs-google-dir "/lit_repo/notes")
			"The path to the directory containing my notes for the
																		references. The note for the item with key <key> is stored in
																		this folder as <key>.org")

		(defvar do.refs/pdf-download-dir (concat gs-google-dir "/lit_repo/downloads")
			"The path to the temporary directory to which we download PDF
																		files.")

		(defun do.refs/get-db-file-list ()
			"Get the list of all the bib files containing my bib database."
			(mapcan (lambda (dir) (directory-files dir t "\\.bib\\'"))
							do.refs/db-dirs))

#+end_src
*** =ebib= configuration
We use ebib to import items and to edit databases. Start with M-x ebib. Then open a database with o. We can open multiple databases at the same time and switch using the arrow keys. Edit a key with E. Auto-generate a key with !. Edit an entry with e. Edit in item in an entry with e. Import a file by selecting an entry in the top window and M-x ebib-import-file. This moves the selected PDF to the PDF directory under the right name. Add notes to an entry with N. Open the attached file with f.

To import an item to the database there are two ways: First, we can just add the entry to the end of the file in a regular Emacs buffer. Second, with ebib opened in a frame, we can paste a BibTeX entry into an Emacs buffer (works nicely with the "Open with emacsclient" .desktop file) and call M-x ebib-import.

The configuration below sets some sane standards, points ebib to our database, and changes the notes format to work well with the "one-file-per-entry" approach.
#+begin_src elisp
		(use-package ebib
			:ensure t
			:init
			(add-hook 'ebib-entry-mode-hook #'no-trailing-whitespace)
			:config
			;; point it to our database
			(setq ebib-file-search-dirs '(,do.refs/pdf-dir))
			(setq ebib-notes-directory do.refs/notes-dir)
			(setq ebib-preload-bib-files '(do.refs/get-db-file-list))

			;; `ebib' uses `bibtex.el' to auto-generate keys for us
			(setq bibtex-autokey-year-length 4)
			(setq bibtex-autokey-titleword-separator "-")
			(setq bibtex-autokey-name-year-separator "-")
			(setq bibtex-autokey-year-title-separator "-")
			(setq bibtex-autokey-titleword-length 8)
			(setq bibtex-autokey-titlewords 3)
			(setq bibtex-autokey-titleword-ignore ;; I took "On" out of this
						'("A" "An" "The" "[^[:upper:]].*" ".*[^[:upper:][:lower:]0-9].*"))

			;; make ebib window easier to deal with
			(setq ebib-index-window-size 25)

			;; use a common/similar notes template between `ebib' and `ivy-bibtex'.
			(setq ebib-notes-template "#+TITLE: Notes on: %T\n\n>|<")
			(remove-hook 'ebib-notes-new-note-hook #'org-narrow-to-subtree)

			;; open pdfs with our favorite pdf reader
			(setq ebib-file-associations '(("pdf" . ,do.minimal/pdf-reader)))

			;; a small convenience function to import into ebib from the clipboard
			(defun do.refs/ebib-import-from-clipboard ()
				"Attempt to import the contents in the kill ring/clipboard into `ebib'."
				(interactive)
				(with-temp-buffer
					(yank)
					(ebib-import)
					(call-interactively #'ebib)))

			;; another convenience function to add the most recently downloaded PDF file
			;; from the ~/Downloads folder to the current entry
			(defun do.refs/ebib-add-newest-pdf-from-downloads ()
				"Add the most recently-downloaded PDF in the ~/Downloads directory to the current entry in ebib."
				(interactive)
				;; pull out the most recent file from ~/Downloads with the .pdf extension.
				(let ((newest-pdf (caar (sort (mapcan (lambda (x) (when (string-equal (file-name-extension (nth 0 x)) "pdf") (cons x nil)))
																							(directory-files-and-attributes do.refs/pdf-download-dir))
																			(lambda (x y) (not (time-less-p (nth 6 x) (nth 6 y))))))))
					(if newest-pdf
							;; https://nullprogram.com/blog/2017/10/27/
							;; need to override `read-file-name' because ebib normally prompts us for the file to import
							(let ((fpath (concat (file-name-as-directory do.refs/pdf-download-dir) newest-pdf))
										(bibkey (ebib--get-key-at-point)))
								(cl-letf (((symbol-function 'read-file-name) (lambda (&rest _) fpath)))
									(call-interactively #'ebib-import-file))
								(message "[Ebib] [Dennis] Imported %s for %s" fpath bibkey))
						(message "[Ebib] [Dennis] No PDF files found in %s." do.refs/pdf-download-dir))))

			;; on import, create two copies of the file. one for reading, one
			;; for annotating. can also use this command to add an annotated
			;; file to an existing entry
			(defun do.refs/ebib-add-annotated (arg)
				"Advice for `ebib-import-file' that automatically creates a
															copy of the imported file that will be used for annotation."
				(interactive "P")
				(let ((filename (ebib-get-field-value ebib-file-field
																							(ebib--get-key-at-point)
																							ebib--cur-db 'noerror 'unbraced)))
					(when filename
						(let* ((pdf-path (file-name-as-directory (car ebib-file-search-dirs)))
									 (orig-path (concat pdf-path filename))
									 (annot-path (concat pdf-path
																			 (file-name-sans-extension filename)
																			 "-annotated"
																			 (file-name-extension filename t))))
							(unless (file-writable-p annot-path)
								(error "[Ebib] [Dennis] Cannot write file %s" annot-path))
							(copy-file orig-path annot-path)))))

			;; add the above after the original call is done.
			(advice-add #'ebib-import-file :after #'do.refs/ebib-add-annotated))
#+end_src
*** =ivy-bibtex= configuration
This package is really just an alternative completion interface for bibtex-completion. It looks like this was initially all written for helm and at some point divided into the bibtex-completion frontend and helm and an ivy backend.

I really like the ivy interface for searching. So we will configure it to be able to search our global database from anywhere in Emacs. We will later use this interface to insert citation keys into LaTeX documents.
#+begin_src elisp
		; ivy-bibtex configuration
		(use-package ivy-bibtex
			:ensure t
			:init
			;; point ivy to the reference database
			(defun do.refs/update-db-file-list ()
				"Update the list of bib files used for `ivy-bibtex'"
				(interactive)
				(setq ebib-preload-bib-files '(do.refs/get-db-file-list))
				(setq bibtex-completion-bibliography '(do.refs/get-db-file-list)))
			(do.refs/update-db-file-list)
			(setq bibtex-completion-library-path '(,do.refs/pdf-dir))
			(setq bibtex-completion-notes-path do.refs/notes-dir) ; notes are by default <key>.org

			;; need this extra config (see github page)
			(push '(ivy-bibtex . ivy--regex-ignore-order)
						ivy-re-builders-alist)

			;; make sure we can open additional files through =M-x bib=
			(setq bibtex-completion-pdf-field nil)

			;; could save an annotated version of a PDF with <key>-annotated.pdf
			(setq bibtex-completion-find-additional-pdfs t)

			;; what is the default citation style?
			(setq bibtex-completion-cite-default-command "cite")
			(setq bibtex-completion-cite-default-as-initial-input t)

			;; hack the APA print function
			;;<<do.refs/reference-format>>

			;; open PDFs with our favourite PDF reader
			(setq bibtex-completion-pdf-open-function
						(lambda (fpath)
							(call-process do.minimal/pdf-reader nil 0 nil fpath))))
#+end_src
One function of ivy-bibtex is to insert the full reference at point. This is a great feature, I just want to hack the output a little bit.
#+begin_src elisp
		(defun do.refs/custom-insert-reference (keys)
			"This is a hacked version of `bibtex-completion-insert-reference'.

										I just remove some punctuation and whitespace compared to the
										original. It's still not perfect, but works well enough for
										something I won't need much"
			(let* ((refs (--map (s-word-wrap fill-column (bibtex-completion-apa-format-reference it))
													keys)))
				(insert (s-join "\n" refs) "\n")))

		(advice-add #'bibtex-completion-insert-reference :override #'do.refs/custom-insert-reference)
#+end_src
*** =org-ref= configuration
This package is responsible for managing references in org-mode documents. While I don't plan on writing many papers in org-mode (can't expect random collaborators to be into Emacs like this…), this is still very useful for personal stuff (my PhD thesis was written in org-mode) and my notes. This also lets me link to references from within notes of other references.
#+begin_src elisp
		(use-package org-ref
			:ensure t
			:demand ; we demand this because it also displays citations in latex documents
			:init
			(setq org-ref-completion-library 'org-ref-ivy-cite)
			:config
			(setq org-ref-default-bibliography '(do.refs/get-db-file-list))
			(setq org-ref-pdf-directory do.refs/pdf-dir)
			;; edit notes using the bibtex-completion package, i.e. `ivy-bibtex'
			(setq org-ref-bibliography-notes nil)
			(setq org-ref-notes-function
						(lambda (thekey)
							(let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
								(bibtex-completion-edit-notes
								 (list (car (org-ref-get-bibtex-key-and-file thekey)))))))
			(defun do.refs/org-ref-insert (&optional arg)
				"Fix org-ref's cite command"
				;; make sure bibtex-completion is initialized
				(bibtex-completion-init)
				;; fix org-ref (see https://github.com/jkitchin/org-ref/issues/717#issuecomment-633788035)
				(ivy-set-display-transformer 'org-ref-ivy-insert-cite-link 'ivy-bibtex-display-transformer)
				;; fix the height of the cite window
				(let ((ivy-fixed-height-minibuffer t))
					(push '(org-ref-ivy-insert-cite-link . do.minimal.rg/get-window-height) ivy-height-alist)
					(org-ref-insert-link arg)
					(pop ivy-height-alist))))
#+end_src
*** =reftex= configuration
#+begin_src elisp
		(use-package reftex
			:init
			(setq reftex-default-bibliography '(do.refs/get-db-file-list)))
#+end_src
*** Plumbing interface
With our three heavy-lifting packages configured, let's write some glue code to make it all play well together and to let me use them the way I want to. The built-in reftex package will play a big part in this. But first we want to discourage it from looking for local databases.

Next, a few definitions for bibliography generation. We set a straw man default name and give ourselves the ability to post-process the buffer containing the BibTeX entries.

#+begin_src elisp

		(defvar do.refs/default-bib-name "refs.bib"
			"The default name for bibliographies generated from TeX or org files.")

		(defvar do.refs/bib-file-post-process-function nil
			"A function to post-process the auto-generated .bib
						files. Called with a temporary buffer as single argument.")

		(defun do.refs/mangle-bib-files (buffer)
			"Insert a header and pull some fields out of the bib file."
			(goto-char (point-min))
			(insert "% ------------------------------------------------------------------\n"
							(format-time-string
							 "% -- This file was auto-generated on %Y-%m-%d at %T\n")
							"% -- Change at own risk.\n"
							"% ------------------------------------------------------------------\n\n")
			;; let's just say that the month field in BibTeX is a little strange... This
			;; is an attempt at removing the {braces} when we find one of the
			;; three-letter month codes jan, feb, etc. in braces.
			(mapcar (lambda (month)
								(goto-char (point-min))
								(while (re-search-forward (format "\\(^\s+month\s+=\s+\\){%s}" month) nil t)
									(replace-match (format "\\1%s" month))))
							'("jan" "feb" "mar" "apr" "may" "jun" "jul" "aug" "sep" "oct" "nov" "dec")))

		(setq do.refs/bib-file-post-process-function #'do.refs/mangle-bib-files)
#+end_src
Now for the main course, do.refs/generate-bib-file can be called on a LaTeX or org-mode buffer and will spit out a fresh .bib file containing only the elements cited in the current document.

#+begin_src elisp

		(defun do.refs/generate-bib-file (&optional outfile)
			"Generate a .bib file for the tex or org document in the current buffer.

					This is done by first extracting all citation keys from the
					document and then pulling them from the global database."
			(interactive
			 ;; if called with a prefix arg, put the generated bib into the kill ring
			 ;; instead of writing it to a file.
			 (if current-prefix-arg
					 (list 'copy)
				 ;; prompt user, get outfile, make sure this all works out.
				 (if (not (or (derived-mode-p 'tex-mode) (derived-mode-p 'org-mode)))
						 (prog1 nil (message "Not visiting a TeX or org buffer."))
					 (let ((target-file (read-file-name "Path to .bib file: " nil nil nil do.refs/default-bib-name)))
						 (cond ((file-directory-p target-file) (error "Output cannot be a directory."))
									 ((file-exists-p target-file)
										(if (yes-or-no-p (format "File %s exists. Overwrite? " target-file))
												(list target-file)
											(message "Not overwriting %s." target-file) nil))
									 (t (list target-file)))))))
			(when outfile
				;; write the output file
				(let ((mode (cond ((derived-mode-p 'org-mode) 'org)
													((derived-mode-p 'tex-mode) 'tex))))
					(let ((tex-buffer (cond ((equal mode 'tex) (current-buffer))
																	((equal mode 'org)
																	 ;; need to export the org doc to latex before we can scan
																	 (let ((org-export-show-temporary-export-buffer nil)
																				 (fn (file-name-sans-extension
																							(buffer-file-name (current-buffer)))))
																		 (org-latex-export-to-latex)
																		 (find-file fn)))))
								(msg (format "Saving .bib file for %s to %s..."
														 (cond ((equal mode 'tex) (reftex-TeX-master-file))
																	 ((equal mode 'org) (buffer-file-name (current-buffer))))
														 outfile)))
						;; extract all keys from file using reftex and insert into bib file using bibtex-completion
						(with-current-buffer tex-buffer
							(let ((keys (reftex-all-used-citation-keys))
										;; skip over some fields for bib file generation
										(bibtex-completion-no-export-fields (append '("author+an" "keywords" "abstract" "file")
																																bibtex-completion-no-export-fields)))
								(with-temp-buffer
									(mapcar (lambda (key) (insert (concat (bibtex-completion-make-bibtex key) "\n"))) keys)
									(when (symbol-function do.refs/bib-file-post-process-function) ; post-process
										(funcall do.refs/bib-file-post-process-function (current-buffer)))
									;; either write to file or move to kill ring
									(if (equal outfile 'copy)
											(progn (kill-region (point-min) (point-max))
														 (message "Copied references database to kill ring."))
										(write-file outfile)))))
						(when (equal mode 'org) ; close the exported document
							(kill-buffer tex-buffer))))))

#+end_src
Now let's customize the way we call ivy-bibtex to query our shiny new reference database. This will define the behavior of our M-x cite and M-x bib commands.

#+begin_src elisp
		(defun do.refs/get-ivy-cite-key ()
			"Attempt to return a citation key as a string using `ivy-bibtex'."
			(with-temp-buffer
				(let ((bibtex-completion-cite-prompt-for-optional-arguments nil)
							(ivy-bibtex-default-action 'ivy-bibtex-insert-citation))
					(ivy-bibtex))
				(when (> (buffer-size) 0)
					(buffer-string))))

		(defun do.refs/ivy-bibtex-insert-cite-key (&optional arg)
			"Attempt to insert a citation key into the current LaTeX buffer."
			(let ((bibtex-completion-cite-prompt-for-optional-arguments nil)
						(ivy-bibtex-default-action 'ivy-bibtex-insert-citation))
				(ivy-bibtex arg)))

		(defun do.refs/ivy-bibtex-insert-reference (&optional arg)
			"Attempt to insert a full reference into the current buffer."
			(let ((ivy-bibtex-default-action 'ivy-bibtex-insert-reference))
				(ivy-bibtex arg)))

		(defun do.refs/insert-key-or-reference (arg)
			"A DWIM 'cite' command."
			(interactive "P")
			(cond ((derived-mode-p 'org-mode) (do.refs/org-ref-insert arg))
						((derived-mode-p 'tex-mode) (do.refs/ivy-bibtex-insert-cite-key arg))
						(t (do.refs/ivy-bibtex-insert-reference arg))))

		(defun do.refs/call-ivy-bibtex (arg)
			"Use this to call `ivy-bibtex' with some interface customizations."
			(interactive "P")
			(let ((ivy-fixed-height-minibuffer t))
				(push '(ivy-bibtex . do.minimal.rg/get-window-height) ivy-height-alist)
				(ivy-bibtex arg)
				(pop ivy-height-alist)))
#+end_src
My most-used snippet is the cite snippet in 𝐿𝐴𝑇𝐸𝑋 documents. Since I have the muscle memory, I want to have a snippet that behaves similarly, but calls ivy-bibtex instead of reftex. This is one way to do it.

#+begin_src elisp
; # -*- mode: snippet -*-
; # contributor : Dennis Ogbe <do@ogbe.net>
; # key: cite
; # group: references
; # name : \cite
; # --

; \cite{${1:key$(unless yas/modified-p (let ((key (do.refs/get-ivy-cite-key))) (if key key "no key received...")))}$0}
#+end_src

Finally, in addition to the LaTeX snippet, we want to access everything through our convenient aliases bib, cite, and gen-bib.
#+begin_src elisp

		(defalias 'cite    #'do.refs/insert-key-or-reference)
		(defalias 'bib     #'do.refs/call-ivy-bibtex)
		(defalias 'gen-bib #'do.refs/generate-bib-file)

#+end_src



** CSV mode
#+begin_src elisp
(use-package csv-mode)
#+end_src

** Atomic chrome for emacs
Enables editing any textbox in browser within an emacs window
https://github.com/alpha22jp/atomic-chrome
#+begin_src elisp
(use-package atomic-chrome)
(require 'atomic-chrome)
(atomic-chrome-start-server)
#+end_src

** HTTPD service for localhost
#+begin_src elisp
(use-package simple-httpd
  :ensure t)
(httpd-serve-directory "~/code/gaurav-iitgn.github.io/my-org-site/public")

#+end_src

* Start server
	
#+begin_src emacs-lisp
;;(server-start)
#+end_src


* Email in emacs
Not using currently.
** Setup mu4e email related things
- Taken from: [[notanumber.io/2016-10-03/better-email-with-mu4e]]
- Taken from: [[www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html]]

#+begin_src emacs-lisp
;; mu4e is to be setup only for non-Windows environments
(require 's)
;;(if (not (eq system-type 'windows-nt))
(if (not (eq 1 1))
  (progn
  
  (require 'mu4e)

  ;; mail address and use name
  (setq user-mail-address "gauravs@iitgn.ac.in"
        user-full-name "Gaurav Srivastava")

  ;;----------------------------------------------
  ;;mu4e configuration
  ;;----------------------------------------------
  ;; basic configuration
  (setq mail-user-agent 'mu4e-user-agent
        mu4e-mu-binary "/usr/bin/mu"
        mu4e-maildir "~/Maildir/gauravs"
        mu4e-drafts-folder "/[Gmail].Drafts"
        mu4e-sent-folder "/[Gmail].All Mail"
        mu4e-trash-folder "/[Gmail].Trash"
        mu4e-refile-folder "/[Gmail].All Mail"
        mu4e-get-mail-command "offlineimap"
        mu4e-update-interval 300
        mu4e-view-show-images t
        mu4e-html2text-command "w3m -dump -T text/html"
        mu4e-headers-include-related t
        mu4e-attachment-dir "~/Downloads"
        mu4e-sent-messages-behavior 'delete
        mu4e-view-show-images t
  )
  ;; use imagemagick if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; actions
  ;; enable viewing in browswer
  (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser) t)

  ;; spell check
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)

  ;; This hook correctly modifies the \Inbox and \Starred flags on email when they are marked.
  ;; Without it refiling (archiving) and flagging (starring) email won't properly result in
  ;; the corresponding gmail action.
  (add-hook 'mu4e-mark-execute-pre-hook
	    (lambda (mark msg)
	      (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox"))
		    ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
		    ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred")))))
  
  ;;email signature
  (setq mu4e-compose-signature
          (concat
            "Gaurav Srivastava\n"
            "Associate Professor, Civil Engineering, IITGN\n"
          )
  )

  ;; bookmarks for common searches 
  (setq mu4e-actions-tags-header "X-Keywords")
  (setq mu4e-bookmarks '(("tag:\\\\Inbox" "Inbox" ?i)
			                   ("flag:unread" "Unread messages" ?u)
			                   ("date:today..now" "Today's messages" ?t)
			                   ("date:7d..now" "Last 7 days" ?w)
			                   ("mime:image/*" "Messages with images" ?p)))

  ;;----------------------------------------------
  ;;SMTP configuration
  ;;----------------------------------------------
  (require 'smtpmail)
  (setq smtpmail-smtp-server "smtp.gmail.com"
        send-mail-function 'smtpmail-send-it
        message-send-mail-function 'smtpmail-send-it
        smtpmail-starttls-credentials '(("smtp.gmail.com" "587" nil nil))
        smtpmail-auth-credentials '(expand-file-name "~/.authinfo")
        smtpmail-smtp-service 587
        smtpmail-debug-info t
  )

  ;; add Cc and Bcc headers to the message buffer
  (setq message-default-mail-headers "Cc: \nBcc: \n")

  (setq message-kill-buffer-on-exit t)

  ;;----------------------------------------------
  ;;mu4e + org configuration
  ;;----------------------------------------------
  (require 'org-mu4e)
  (setq org-mu4e-link-query-in-headers-mode nil)
	

  ;;----------------------------------------------
  ;;capturing sent-mail in org
  ;;----------------------------------------------
	
))
#+end_src


** Setup notmuch email related things
- Taken from: [[kkatsuyuki.github.io/notmuch-conf]]
#+begin_src emacs-lisp
;; notmuch is to be setup only for non-Windows environments
(require 's)
(if (not (eq 1 1))
;;(if (not (eq system-type 'windows-nt))
  (progn
  (require 'notmuch)

  ;; mail address and use name
  (setq mail-user-agent 'message-user-agent)
  (setq user-mail-address "gauravs@iitgn.ac.in"
        user-full-name "Gaurav Srivastava")

  ;;----------------------------------------------
  ;;notmuch configuration
  ;;----------------------------------------------
  (setq notmuch-search-oldest-first nil
        notmuch-fcc-dirs "~/Maildir/gauravs/[Gmail].Sent Mail"
        notmuch-mua-compose-in 'new-frame
  )

  ;;----------------------------------------------
  ;;SMTP configuration
  ;;----------------------------------------------
  (require 'smtpmail)
  (setq smtpmail-smtp-server "smtp.gmail.com"
        send-mail-function 'smtpmail-send-it
        message-send-mail-function 'smtpmail-send-it
        smtpmail-starttls-credentials '(("smtp.gmail.com" "587" nil nil))
        smtpmail-auth-credentials '(expand-file-name "~/.authinfo")
        smtpmail-smtp-service 587
        smtpmail-debug-info t
  )

  ;; add Cc and Bcc headers to the message buffer
  (setq message-default-mail-headers "Cc: \nBcc: \n")

  ;; postponed messages be put in draft directory
  (setq message-auto-save-directory "~/Maildir/gauravs/[Gmail].Drafts")
  (setq message-kill-buffer-on-exit t)

  ;; change the directory to store the sent mail
  (setq message-directory "~/Maildir/gauravs")
))
#+end_src

* KEY BINDINGS
- key bindings for org agenda and others
	
#+begin_src emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cq" 'save-buffers-kill-emacs)
(setq org-log-done t)
#+end_src

* Registers for quickly opening certain files
- C-x r j e <reg name> to open
	
#+begin_src emacs-lisp
(set-register ?e (cons 'file "~/.emacs"))
(set-register ?b (cons 'file "~/.bashrc"))
(set-register ?l (cons 'file "~/.ledgerrc"))
(set-register ?E (cons 'file "~/code/dot-config/emacs/emacs-config.org"))
(set-register ?I (cons 'file (concat gs-mega-dir "/Notes/000_Inbox.org")))
(set-register ?J (cons 'file (concat gs-mega-dir "/ledger/data/journal.ledger")))
(set-register ?C (cons 'file (concat gs-mega-dir "/bin/gen_cat.csv")))
(set-register ?R (cons 'file (concat gs-google-dir "/lit_repo/all_entries.bib")))
#+end_src

 
