#+TITLE: Emacs Configuration # Started from Harry Schwartz's configuration ideas
# https://emacs.readthedocs.io/en/latest/index.html
# Subsequently, I have copied from the config of many persons.

* Initialize package manager
#+begin_src emacs-lisp :tangle yes
(require 'package)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" .  "https://melpa.org/packages/") t)
(package-initialize)
#+end_src

* Configure =use-package=
This package is used to configure other packages.
Rest of the packages are managed by =use-package=. The following ensures =use-package= is able to handle things as expected

#+begin_src emacs-lisp :tangle yes
;; Ensure that use-package is installed.
;; If not installed, do so and to initial setup
(when (not (package-installed-p 'use-package))
	(package-refresh-contents)
	(package-install 'use-package))
	
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src


* Define some constants and functions to make life easy later

** Constants
#+begin_src emacs-lisp :tangle yes
(defconst *sys-gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst *sys-win32*
  (eq system-type 'windows-nt)
  "Are we running on a Windows system?")

(defconst *sys-linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys-mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst *sys-cygwin*
  (eq system-type 'cygwin)
  "Are we running on a Cygwin system?")

(defconst *sys-root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")

(defconst *rg*
  (executable-find "rg")
  "Do we have ripgrep?")

(defconst *python*
  (executable-find "python")
  "Do we have python?")

(defconst *python3*
  (executable-find "python3")
  "Do we have python3?")

(defconst *mvn*
  (executable-find "mvn")
  "Do we have Maven?")

(defconst *gcc*
  (executable-find "gcc")
  "Do we have gcc?")

(defconst *git*
  (executable-find "git")
  "Do we have git?")

(defconst *pdflatex*
  (executable-find "pdflatex")
  "Do we have pdflatex?")

(defconst *this-year*
  (format-time-string "%Y" (current-time))
  "String of current year YYYY")
#+end_src

** A function to print usable debug messages during execution
#+BEGIN_SRC emacs-lisp :tangle yes
(defun gs/debug-print (token)
   (message "%s: `%s` is `%s`\n" 
	    (format-time-string "%H:%M:%S" (current-time)) token (eval token)))
#+END_SRC

* Information about myself

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Gaurav Srivastava"
      user-mail-address "it.gaurav@gmail.com")
#+end_src


* UI preferences
** General preferences
Display time in the emacs status bar and set the default character encoding.
#+begin_src emacs-lisp :tangle yes
(display-time-mode)
;;this applies everywhere
(set-language-environment "UTF-8")
#+end_src

Change "yes or no" to "y or n" for faster response.
#+begin_src emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Save silently without prompting.
#+begin_src emacs-lisp :tangle yes
(setq save-silently t)
#+end_src

Display backtrace on error by default.
#+begin_src emacs-lisp :tangle no
(setq debug-on-error t)
#+end_src

Default image width
#+begin_src emacs-lisp :tangle yes
(setq org-image-actual-width (list 400))
#+end_src

** Set a different backup directory to prevent cluttering
https://stackoverflow.com/questions/2680389/how-to-remove-all-files-ending-with-made-by-emacs/2680682
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
#+end_src


** Swap cmd and option key on Mac (make cmd the meta key)
https://apple.stackexchange.com/questions/12087/emacs-on-mac-os-x-to-alt-or-command/53551
#+begin_src emacs-lisp :tangle yes
(cond
 (*sys-mac* ; Mac OS X
	(progn
		(setq mac-option-key-is-meta nil)
		(setq mac-command-key-is-meta t)
		(setq mac-command-modifier 'meta)
		(setq mac-option-modifier nil)
		(message "Mac OS X"))))
#+end_src

** Change the color and type of point. Also, stop blinking.
Disabling for now to see if it enhances working speed.
#+begin_src emacs-lisp :tangle yes
(setq evil-emacs-state-cursor '("blue" box)) 
(setq evil-normal-state-cursor '("firebrick" box)) 
(setq evil-visual-state-cursor '("green" box))
(setq evil-insert-state-cursor '("darkgreen" box))
(setq evil-replace-state-cursor '("red" bar))
(setq evil-operator-state-cursor '("red" hollow))
(blink-cursor-mode 0)
#+end_src

** Increase default font size to 11 pt.
- values given are in 1/10 pt; so, a value of 140 implies 14pt font
- this is now set in the .emacs file directly as different machines have different optimal font sizes

#+begin_src emacs-lisp :tangle yes
(set-face-attribute 'default nil :height 110)
#+end_src

** Disable tiny scroll bar of minimuffer window.

#+begin_src emacs-lisp :tangle yes
(set-window-scroll-bars (minibuffer-window) nil nil)
#+end_src


** Highlight the cursor when the window scrolls.
Disabling for speed.
#+begin_src emacs-lisp :tangle no
(use-package beacon
  :ensure t
  :diminish beacon-mode
  :config
  (beacon-mode t))
#+end_src

** Enable leuven theme and configure doom modeline
Change mode-line color to something that looks better with the doom-mode-line.
#+begin_src emacs-lisp  :tangle yes
(if (> emacs-major-version 24)
  (progn 
	(use-package doom-themes
          :init (load-theme 'doom-acario-light t)
        );use-package doom-themes
	(use-package all-the-icons)
	(use-package doom-modeline
	  :ensure t
	  :init
	  (doom-modeline-mode 1)
	  (setq doom-modeline-height 8)
	)
   );progn
   (
        ;use default theme for v<24
	(set-face-background 'mode-line "black")
	(set-face-background 'mode-line-inactive "dark gray")
   );else
);if
    

#+end_src

** Use doom themes
Didn't find anything better then leuven to my liking.
#+begin_src emacs-lisp :tangle no
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one-light t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

#+end_src

** Line numbers and such.
- Always show line numbers and column numbers by default.

#+begin_src emacs-lisp :tangle yes
(if (>= emacs-major-version 26)
		(global-display-line-numbers-mode)
	  (global-linum-mode)
)

(column-number-mode)
(show-paren-mode 1)
(global-visual-line-mode t)
(global-auto-revert-mode t)
#+end_src


** Use visual bell (flash the mode line instead of a bell or whole frame).

#+begin_src emacs-lisp :tangle yes
(setq visible-bell nil
      ring-bell-function 'gs/flash-mode-line)
(defun gs/flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+end_src

** Highlight the current line.

#+begin_src emacs-lisp :tangle yes
  (global-hl-line-mode)
#+end_src

** Convert tabs to spaces, reduce default tab width to 2
#+begin_src emacs-lisp :tangle yes
  (setq-default tab-width 2)
	;;(setq tab-width 2)
(setq org-src-tab-acts-natively t)
#+end_src

** Auto-scroll compilation window.

#+begin_src emacs-lisp :tangle yes
  (setq compilation-scroll-output t)
#+end_src

** Set straight the undo and redo functionality in evil.

#+begin_src emacs-lisp :tangle yes
  (use-package undo-tree)
  (global-undo-tree-mode)
  ;; this is for undo and redo in evil
  ;; following works with emacs earlier versions
  (eval-after-load 'evil-maps
    '(progn
      (define-key evil-normal-state-map "u" 'undo-tree-undo)
      (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
     )
  )
#+end_src

** For coloring matching parentheses.

#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters)
#+end_src

** Line wrap in LaTeX mode.

#+begin_src emacs-lisp :tangle yes
(add-hook 'LaTeX-mode-hook 'auto-fill-mode)
#+end_src

** Better scrolling by scrolling only by a line at a time.

#+begin_src emacs-lisp :tangle yes
  (setq scroll-conservatively 100)
#+end_src
** Spell check enable in text mode
Download hunspell from here: http://wordlist.aspell.net/dicts/
#+begin_src emacs-lisp :tangle yes
	;; spell checker program
	(if *sys-win32*
		(setq ispell-program-name "~/MEGA/hunspell-win32/bin/hunspell")
		(setq ispell-program-name "hunspell"))

	(use-package flyspell
		:ensure t
		:init
		(add-hook 'org-mode-hook
							(lambda () (flyspell-mode t))))

#+end_src


** Set default applications for opening the relevant files
- Within Cygwin, open everything with cygstart.exe
	- It passess it on the Windows and appropriate application is triggered

#+begin_src emacs-lisp :tangle yes
	(use-package dired-open)
	 (if *sys-cygwin*
		 (progn (setq dired-open-extensions
					 '(
							("doc"  . "cygstart")
							("docx" . "cygstart")
							("xls"  . "cygstart")
							("xlsx" . "cygstart")
							("html" . "cygstart")
							("htm"  . "cygstart")
							("pdf"  . "cygstart")
						)
						)
						(setq org-file-apps
					 '(
							(auto-mode . emacs)
							("\\.x?html?\\'" . "cygstart %s")
							("\\.pdf\\'" . "cygstart %s")
						)
						)
			);progn
		);if-cygwin

; disable validation link in HTML export
(setq org-html-validation-link nil)
#+end_src


* Utilities
** Function to reload dot-emacs without closing emacs.
#+begin_src emacs-lisp :tangle yes
(defun gs/reload-dot-emacs ()
  "Save the .emacs buffer if needed, then reload .emacs."
  (interactive)
  (let ((dot-emacs "~/.emacs"))
    (and (get-file-buffer dot-emacs)
         (save-buffer (get-file-buffer dot-emacs)))
    (load-file dot-emacs))
  (message "Re-initialized!"))
#+end_src

** Function to rename the current buffer.
Source: http://www.whattheemacsd.com/.
#+begin_src emacs-lisp :tangle yes
(defun gs/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'."
                   name (file-name-nondirectory new-name)))))))

#+end_src
** Function to mass delete buffers of different kinds
to be fixed.
#+begin_src emacs-lisp :tangle yes
(defun gs/kill-all-buffers-except-toolbox ()
  "Kill all buffers except current one and toolkit (*Messages*, *scratch*). Close other windows."
  (interactive)
  (mapc 'kill-buffer (remove-if
                       (lambda (x)
                         (or
                           (eq x (current-buffer))
                           (member (buffer-name x) '("*Messages*" "*scratch*"))))
                       (buffer-list)))
  (delete-other-windows))
#+end_src

** Which key
#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :ensure t
  :defer 10
  :diminish which-key-mode
  :config
  (which-key-mode 1))
#+end_src


* Enable, disable and configure packages
** dashboard
#+begin_src emacs-lisp :tangle yes
(use-package dashboard
  :ensure t
  :config
    (dashboard-setup-startup-hook))
(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
(setq dashboard-items '((agenda . 10)
                        (recents . 5)
                        (registers . 5)
                        (recents . 5)))
#+end_src

** To inherit executable paths from Shell
Of course, this will not work for windows.
#+begin_src emacs-lisp :tangle yes
(if (not *sys-win32*)
(progn
	(use-package exec-path-from-shell)
	(exec-path-from-shell-initialize)
))
#+end_src

** Load relevant languages in org babel

#+begin_src emacs-lisp :tangle yes
(org-babel-do-load-languages
  'org-babel-load-languages
  '((python . t))
)
#+end_src

** YASnippet for inserting structured templates

#+begin_src emacs-lisp :tangle yes
(use-package yasnippet)
(require 'yasnippet)
(add-to-list 'yas-snippet-dirs "~/code/dot-config/yas-snippets")
(use-package consult-yasnippet)
(yas-global-mode 1)
#+end_src


** 's' - string manipulating package

#+begin_src emacs-lisp :tangle yes
(use-package s)
(require 's)
#+end_src

** EVIL -- enable

#+begin_src emacs-lisp :tangle yes
(setq evil-want-integration t)
(setq evil-want-keybinding nil)
(use-package evil)
(require 'evil)
(evil-mode t)
;; Make movement keys behave appropriately when visual-line-mode wraps lines
;; https://stackoverflow.com/questions/20882935/how-to-move-between-visual-lines-and-move-past-newline-in-evil-mode
(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
; Make horizontal movement cross lines                                    
(setq-default evil-cross-lines t)
#+end_src

** ORG -- enable and configure different things

#+begin_src emacs-lisp :tangle yes
(require 'org)
(use-package org-mime)
#+end_src

*** set org directory, agenda files etc

#+begin_src emacs-lisp :tangle yes
(defvar gs/org-root-dir (concat *gs-mega-d* "/Notes"))
(setq org-directory gs/org-root-dir)
(setq org-agenda-files (list gs/org-root-dir))

;; setup refile to use all agenda files
(setq org-refile-targets
  '((nil :maxlevel . 3)
    (org-agenda-files :maxlevel . 3)))
		
;; enable use of tags from all agenda files
(setq org-complete-tags-always-offer-all-agenda-tags t)
#+end_src

*** setup of inbox and other files, capture templates, etc.

#+begin_src emacs-lisp :tangle yes
(defun gs/fmt-journal-time-str (full-date)
  "Returns date in custom journal date format. See also
   gs/create-journal-entry"
	(setq split-date-str (s-split "-" full-date))
	(setq split-date-num (mapcar 'string-to-number split-date-str))
  (setq year (nth 0 split-date-str))
  (setq month (nth 1 split-date-num))
  (setq date (nth 2 split-date-str))
  (setq fname (concat *gs-mega-d* "/Notes/" year ".org"))
	(concat (substring (calendar-month-name month) 0 3) " "
                 date ", "
                 (substring (calendar-day-name (list (nth 1 split-date-num)
                                                     (nth 2 split-date-num)
                                                     (nth 0 split-date-num)))
                  0 3))
)

(defvar gs/org-inbox-file (concat *gs-mega-d* "/Notes/" *this-year* ".org"))
(defun gs/today-capture-headline ()
  (interactive)
  (concat "" (gs/fmt-journal-time-str (org-read-date nil nil "today")) "" ))

;; t is for quick TODO capture
;; 'e' is for email TODO capture and 'r' is for email archive capture (if an email is related to an ongoing issue)
;; Both 'e' and 'r' rely on a browser plugin (GS-ORG-CAPTURE) that copies Email subject and URL for use by the capture template (%x)
(setq org-capture-templates
  `(("t" "Quick Todo" entry (file+headline gs/org-inbox-file ,(gs/today-capture-headline))
		 "* TODO %^{Task}\n" :immediate-finish t)
    ("i" "Thoughts and Ideas" entry (file+headline gs/org-inbox-file "Ideas")
		 "* %^{Idea}\n" :immediate-finish t)
    ("e" "Email Todo" entry (file+headline gs/org-inbox-file ,(gs/today-capture-headline))
		 "* TODO Email %x %?\n")
    ("r" "Email Resource" entry (file+headline gs/org-inbox-file ,(gs/today-capture-headline))
		 "* Resource Email %x %?\n")
    ("m" "Meeting" entry (file+headline gs/org-inbox-file ,(gs/today-capture-headline))
		 "* %t %?")
	 ))
#+end_src


*** todo states

#+begin_src emacs-lisp :tangle yes
(setq org-todo-keywords 
  '((sequence "TODO(t)" 
              "DOING(g@)"
              "FOLLOWUP(f@)" 
              "DISCUSS(d@)"
							"|"
							"DONE(x@/!)"
							"CANCELLED(c@/!)"
)))
(setq org-todo-keyword-faces
   '(("TODO"     . (:foreground "red" :weight "bold"))
	   ("DOING"    . (:foreground "cyan" :weight "bold"))
	   ("FOLLOWUP" . (:foreground "orange" :weight "bold"))
     ("DISCUSS"  . (:foreground "blue" :weight "bold"))
     ("DONE"     . (:foreground "green" :weight "bold"))
     ("CANCELLED". (:foreground "gray" :weight "bold"))
))
#+end_src

*** Set ORG to be the default major mode

#+begin_src emacs-lisp :tangle yes
(setq initial-major-mode 'org-mode)
#+end_src

*** Use sticky headers

#+begin_src emacs-lisp :tangle yes
(use-package org-sticky-header
 :hook (org-mode . org-sticky-header-mode)
 :config
 (setq-default
  org-sticky-header-full-path 'full
  ;; Child and parent headings are seperated by a /.
  org-sticky-header-outline-path-separator "/"))
#+end_src

*** For pretty bullets and proportional font sizes

#+begin_src emacs-lisp :tangle yes
(use-package org-bullets
	:init
	(add-hook 'org-mode-hook 'org-bullets-mode))
;; hide slash and stars for italics and bold
(setq org-hide-emphasis-markers t)

;; https://zzamboni.org/post/beautifying-org-mode-in-emacs/
;; proportional font sizes
;;  (let* ((variable-tuple
;;            (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
;;                  ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
;;                  ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
;;                  ((x-list-fonts "Verdana")         '(:font "Verdana"))
;;                  ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
;;                  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
;;           (base-font-color     (face-foreground 'default nil 'default))
;;           (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
;;  
;;      (custom-theme-set-faces
;;       'user
;;       `(org-level-8 ((t (,@headline ,@variable-tuple))))
;;       `(org-level-7 ((t (,@headline ,@variable-tuple))))
;;       `(org-level-6 ((t (,@headline ,@variable-tuple))))
;;       `(org-level-5 ((t (,@headline ,@variable-tuple))))
;;       `(org-level-4 ((t (,@headline ,@variable-tuple :height 0.80))))
;;       `(org-level-3 ((t (,@headline ,@variable-tuple :height 0.90))))
;;       `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.00))))
;;       `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.10))))
;;       `(org-document-title ((t (,@headline ,@variable-tuple :height 1.3 :underline nil))))))

;; enable proportional fonts for org mode
;;(add-hook 'org-mode-hook 'variable-pitch-mode)

#+end_src

*** syntax highlighting in source blocks; disable adaptive indentation

#+begin_src emacs-lisp :tangle yes
(setq org-src-fontify-natively t)
(setq org-adapt-indentation nil)
(setq org-src-preserve-indentation t)
#+end_src


*** use images/screenshots

#+begin_src emacs-lisp :tangle yes
(use-package org-download)
(setq org-startup-with-inline-images t)
#+end_src

*** use evil with org agendas

#+begin_src emacs-lisp :tangle yes
(use-package evil-org
  ;added as temporary fix to a bug
  ;https://github.com/Somelauw/evil-org-mode/issues/93
  :init
  (fset 'evil-redirect-digit-argument 'ignore)
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda() (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

;; RETURN will follow links in orgmode files
(setq org-return-follows-link t)
#+end_src

*** custom functions to handle documents, workflows and book keeping

#+begin_src emacs-lisp :tangle yes
;; suggested by Nicolas Goaziou
;; taken from: https://kitchingroup.cheme.cmu.edu/blog/2013/05/05/Getting-keyword-options-in-org-files/
;; gets value of org keywords like TITLE, DATE, etc.
;; allows any customized #+PROPERTY:value
(defun gs/get-org-kwds ()
  "parse the buffer and return a cons list of (property . value)
		from lines like: #+PROPERTY: value"
  (org-element-map (org-element-parse-buffer 'element) 'keyword
                   (lambda (keyword) (cons (org-element-property :key keyword)
                                           (org-element-property :value keyword)))
  )
)

(defun gs/get-org-kwd (KEYWORD)
  "get the value of a KEYWORD in the form of #+KEYWORD: value"
  (interactive)
  (cdr (assoc KEYWORD (gs/get-org-kwds)))
)

#+end_src


- Function that returns the resource directory linked with the current headline (through keyword DOCDIR within PROPERTIES)
#+begin_src emacs-lisp :tangle yes
(defun gs/get-resource-dir ()
"Gets the name of the document resource directory of the current headline within the org file"
  (interactive)
	
	;; obtain the DOCDIR (google / mega / dropbox / nas) from the PROPERTIES
  ;; get the base directory from DOCDIR keyword of the file
  ;; this specifies whether the related documents are on MEGA, Dropbox,
  ;; Google Drive or NAS 
  ;; this keyword is DOCDIR -- must be defined in the PROPERTIES of the headline
  ;;get the identifier for file location
	(gs/debug-print '(org-get-tags-at))   ;default at point
  (let ((mydocdirstr (car (org-property-values "DOCDIR")))
				(mybasedir *gs-google-d*)
				(mytag (car 
				          (save-excursion
                    (org-back-to-heading)
                    (org-get-tags-at))))
				;(mytag (car (org-get-tags)))
       )
    ; first tag (in mytag) should be in the format XXX_Y_Z where XXX, Y, Z are all numbers which classifies the heading (e.g. 405_2_1)
    ; corresponding directory name will be 405.2.1_name

		;;set appropriate base directory based on DOCDIR
		(cond 
				((equal mydocdirstr "dropbox")(setq mybasedir *gs-dropbox-d*))
				((equal mydocdirstr "mega")(setq mybasedir *gs-mega-d*))
				((equal mydocdirstr "nas")(setq mybasedir *gs-nas-d*))
		)
	  (gs/debug-print 'mydocdirstr)

	;; replace _ with . to enable mapping with directory names
  (setq mytag (s-replace "_" "." mytag))

  ;; build directory name
  (setq mydir (concat mybasedir "/" mytag "_*"))
	
	(gs/debug-print 'mydir)
	
  ;; expand the wildcard to get full name
	;; file-expand-wildcards returns a list; pick the first element with car
  (setq mydir (car (file-expand-wildcards mydir)))
	
	(gs/debug-print 'mydir)

  ; this will return the final system-dependent path
  (setq mydir (expand-file-name mydir))
	
  ; above doesn't work on Windows sometimes
  (if *sys-win32*
	  (progn
		(setq mydir (s-replace "/" "\\" mydir))
		(setq mydir (s-replace "'" "\"" mydir))
		);progn
	);if-win32
	(if *sys-mac*
		(setq mydir (concat "'" mydir "'"))
	);if-mac
	
	;for returning the directory name
	(message mydir)

  );let

);defun gs/get-resource-dir
#+end_src

- Function to open the resource directory linked with the current headline (through keyword DOCDIR within PROPERTIES)
#+begin_src emacs-lisp :tangle yes
(defun gs/open-resource-dir ()
"Opens document resource directory of the current headline within the org file"
  (interactive)
  (setq org-cmd (concat *gs-file-manager* (gs/get-resource-dir)))
	(gs/debug-print 'org-cmd)
  (async-shell-command org-cmd)

  ;; open this directory in a new frame of emacs (within dired)
  ;;(dired-other-frame mydir)
)
#+end_src

- Function to open a FILE within the resource directory linked with the current headline (through keyword DOCDIR within PROPERTIES)
#+begin_src emacs-lisp :tangle yes
(defun gs/open-file-within-dir (FILE)
"Opens a file within the document resource directory of the current headline within the org file"
  (interactive)
  (shell-command (concat *gs-file-manager* (expand-file-name FILE (gs/get-resource-dir))))
)
#+end_src

*** Auto completion of (custom) tags in org-mode
- Try with helm (helm-{dictionary,addressbook,wordnet,etc})
- no success so far
#+begin_src emacs-lisp :tangle yes

#+end_src

*** Custom Agenda views and customized behavior
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((agenda ""
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-deadline-warning-days 0)))
          (todo "DOING"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nActive Tasks\n")))
          (todo "TODO"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks to be Planned\n")))
          (todo "FOLLOWUP"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nFollow ups\n")))
          (todo "DISCUSS"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTo be Discussed with someone\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n")))));"g"
				;;---- DO THINGS ----
				("d" . "Do Things")
				("dq" "Quick things first"
          (
            (todo "TODO"
                 ((org-agenda-prefix-format "  %i %-12:c [%e] ")
								  (org-agenda-sorting-strategy '(priority-up effort-up))
                  (org-agenda-overriding-header "\nThings to do\n")))
           )
        );"dq"
				("dr" "Review documents/emails"
          (
           (tags-todo "Review"
                 ((org-agenda-prefix-format "  %i %-12:c [%e] ")
                  (org-agenda-overriding-header "\nThings to read and review\n")))
           )
        );"dr"
				;;---- FOLLOW-UP ON THINGS ----
				("f" . "Follow-up on issues")
				("fc" "Follow-up on CD issues"
          (
            (tags "405|406")
            (todo "FOLLOWUP"
                 ((org-agenda-prefix-format "  %i %-12:c [%e] ")
                  (org-agenda-overriding-header "\nFollow-up on CD issues\n")))
          )
        );"fc"
				;;---- PEOPLE BASED ----
				("p" . "With a person")
				("pd" "Meeting with Director"
          (
            (tags-todo "BriefDirector"
                 ((org-agenda-prefix-format "  %i %-12:c [%e] ")
                  (org-agenda-overriding-header "\nThings to be discussed with Director\n")))
          )
        );"pd"
				("pv" "Meeting with Vikas Kumar"
          (
            (tags-todo "VikasKumar"
                 ((org-agenda-prefix-format "  %i %-12:c [%e] ")
                  (org-agenda-overriding-header "\nThings to be discussed with Vikas\n")))
          )
        );"pv"
		);list
);setq

(setq org-agenda-todo-ignore-scheduled 'all)
(setq org-agenda-todo-ignore-deadlines 'all)
(setq org-agenda-todo-ignore-timestamps 'all)

#+end_src





** Google calendar sync with =gcal=
#+begin_src emacs-lisp :tangle yes
(use-package org-gcal
		:ensure t
		:config
				(setq org-gcal-client-id *gs-gcal-client-id*
						org-gcal-client-secret *gs-gcal-client-secret*
						org-gcal-file-alist '(("c_dkuvktbde55novv834t98om1u0@group.calendar.google.com" .  "~/MEGA/Notes/google-org-calendar.org"))))
; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
#+end_src


** Ledger and its configuration
#+begin_src emacs-lisp :tangle no
	;; (use-package company)
	;; (use-package company-ledger
	;; 	:ensure company
	;; 	:init
	;; 	(with-eval-after-load 'company
	;; 		(add-to-list 'company-backends  'company-ledger))
	;; 	)

	;; https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money/
	;; https://github.com/yradunchev/ledger
	(use-package ledger-mode)
	(use-package flycheck-ledger  :after ledger-mode)
	(setq ledger-binary-path *gs-ledger-x*)
	(add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))
	(add-hook 'ledger-mode-hook
						(lambda ()
							;; (company-mode)
							(setq-local tab-always-indent 'complete)
							(setq-local completion-cycle-threshold t)
							(setq-local ledger-complete-in-steps t)
							)
						)

	;; capture templates for org
  (setq gs-ledger-file (concat *gs-mega-d* "/ledger/data/journal.ledger"))
	(setq org-capture-templates
				(append '(("l" "Ledger entries")
									("lc" "SBI Credit Card" plain
									 (file gs-ledger-file)
									 "%(org-read-date) %^{Description}
		Expenses:%^{Account}  %^{Amount}
		Liabilities:CC:SBI
	")
									("lb" "SBI Savings Bank Account" plain
									 (file gs-ledger-file)
									 "%(org-read-date) * %^{Description}
		Expenses:%^{Account}  %^{Amount}
		Assets:Saving:SBIGN
	"))
								org-capture-templates))

#+end_src

** Vertico and its configuration
#+begin_src emacs-lisp :tangle yes
(use-package vertico
  :init
  (vertico-mode +1))

(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

(use-package marginalia
  :config (marginalia-mode))

(use-package consult
  :bind
  (("M-y" . 'consult-yank-from-kill-ring)
   ("C-x b" . 'consult-buffer)))
(recentf-mode)

(setq completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)

;;(use-package company
;;  :config
;;  (setq company-idle-delay 0)
;;  (setq company-minimum-prefix-length 3)
;;  (global-company-mode t))

(use-package embark
  :ensure t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                (window-parameters (mode-line-format . none))))
)

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Helm and its configuration
#+begin_src emacs-lisp :tangle yes
(use-package helm
  :ensure t
  ;;  :bind (("M-x"     . helm-M-x)
  ;;         ("M-y"     . helm-show-kill-ring)
  ;;         ("C-x b"   . helm-mini)
  ;;         ("C-x C-b" . helm-buffers-list)
  ;;         ("C-x C-f" . helm-find-files)
  ;;        			 ("C-c h g" . helm-google-suggest)
  ;;         ("C-h r"   . helm-info-emacs)
  ;;         ("C-h l" . helm-locate_library)
  ;;  ;;       ("C-x r b" . helm-filtered-bookmarks)  ; Use helm bookmarks
  ;;         ("C-c f"   . helm-recentf)
  ;;         ("C-c j"   . helm-imenu)
  ;;         ("C-c C-r" . helm-resume)
  ;;  ;;       :map helm-map
  ;;  ;;       ("<tab>" . helm-execute-persistent-action)  ; Rebind tab to run persistent action
  ;;  ;;       ("C-i"   . helm-execute-persistent-action)  ; Make TAB work in terminals
  ;;  ;;       ("C-z"   . helm-select-action)  ; List actions
  ;;  ;;       :map shell-mode-map  ;; Shell history
  ;;  ;;       ("C-c C-l" . helm-comint-input-ring)
  ;;         )
  :config
  ;; See https://github.com/bbatsov/prelude/pull/670 for a detailed
  ;; discussion of these options.
  (setq helm-split-window-inside-p            t
        helm-buffers-fuzzy-matching           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t)

  ;;for speed
  ;;(setq helm-google-suggest-use-curl-p t)

  ;; keep follow-mode in between helm sessions once activated
  (setq helm-follow-mode-persistent t)

  ;; Smaller helm window
  (setq helm-autoresize-max-height 30)
  (setq helm-autoresize-min-height 0)
  (helm-autoresize-mode 1)

  ;; Don't show details in helm-mini for tramp buffers
  (setq helm-buffer-skip-remote-checking t)

  (require 'helm-bookmark)
  ;; Show bookmarks (and create bookmarks) in helm-mini
  (setq helm-mini-default-sources '(helm-source-buffers-list
                                    helm-source-recentf
                                    helm-source-bookmarks
                                    helm-source-bookmark-set
                                    helm-source-buffer-not-found))

  ;;(substitute-key-definition 'find-tag 'helm-etags-select global-map)
)
; don't turn on by default
; (helm-mode 1)

;this needs some fixing. does not work on MacOS
;Error: get-device-terminal "ns" does not exist 
;display helm in its own frame
;(setq helm-display-function 'helm-display-buffer-in-own-frame
      ;helm-display-buffer-reuse-frame t
      ;helm-use-undecorated-frame-option t)
#+end_src


** Matlab 
Set this only when ~matlab-mode~ has been installed.
https://sourceforge.net/p/matlab-emacs/src/ci/master/tree/INSTALL
#+begin_src emacs-lisp :tangle no
(if (file-directory-p "~/code/matlab/matlab-emacs-src")
  (progn
		(add-to-list 'load-path "~/code/matlab/matlab-emacs-src")
		(require 'matlab-load)
		(setq matlab-shell-command "~/code/matlab_emacs_wrapper")
		(setq matlab-shell-command-switches (list "-nodesktop"))
		;; setup matlab in babel
		(setq org-babel-default-header-args:matlab
		'((:results . "output") (:session . "*MATLAB*")))

		;; list of babel languages
		(org-babel-do-load-languages
		'org-babel-load-languages
		'((matlab . t)
		))
	);progn
);if
#+end_src


#+begin_src emacs-lisp :tangle no
;(load-library "matlab-load")
;(setq matlab-shell-command "/Applications/MATLAB_R2020a.app/bin/matlab")
;(customize-set-variable 'matlab-shell-command "~/code/matlab_emacs_wrapper")
; add for org-mode babel
(add-to-list
'auto-mode-alist
'("\\.m$" . matlab-mode))
(setq matlab-indent-function t)

;;(use-package matlab-mode)
	(autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
	;;tried but doesn't work on windows
	(if *sys-win32*
		(setq matlab-shell-command "C:\\Program Files\\MATLAB\\R2017a\\bin\\MATLAB.exe"))
	(if (or *sys-mac* *sys-linux*)
		(setq matlab-shell-command "matlab"))


#+end_src

** Python configuration
#+begin_src emacs-lisp :tangle yes

(setq python-shell-interpreter "python3")


;(use-package elpy
;  :ensure t
;  :defer t
;  :init
;  (advice-add 'python-mode :before 'elpy-enable)
;	(setq elpy-rpc-python-command "python3")
;)

;; the following has been set as the system variable $WORKON_HOME 
;; (setq elpy-rpc-virtualenv-path "/cygdrive/c/users/gaurav/cyg_python_venv")

(setq python-indent-offset 2)

#+end_src

** Setup language server for relevant ones
#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode)
(require 'lsp-mode)
(add-hook 'go-mode-hook 'lsp-deferred)
; install server: go get golang.org/x/tools/gopls@latest
(add-hook 'sh-mode-hook 'lsp-deferred)
; install server: npm i -g bash-language-server (after brew install npm)
(add-hook 'python-mode-hook 'lsp-deferred)
; install server: pip3 install python-language-server[all]
(add-hook 'emacs-lisp-mode-hook 'lsp-deferred)

#+end_src

** Yaml
#+begin_src emacs-lisp :tangle yes
(use-package yaml)
(use-package yaml-mode)
#+end_src
** Slime
#+begin_src emacs-lisp :tangle yes
(use-package slime)
(use-package paredit)
(setq inferior-lisp-program "sbcl")
#+end_src
** Lisp structural editing 
- https://github.com/abo-abo/lispy
- https://github.com/countvajhula/symex.el
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lispy)
;(add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
(use-package symex
  :config
  (symex-initialize)
  (global-set-key (kbd "s-;") 'symex-mode-interface))  ; or whatever keybinding you like

; overload <Esc> in evil mode
(evil-define-key 'normal symex-mode-map
  (kbd "<escape>") 'symex-mode-interface)

(evil-define-key 'insert symex-mode-map
  (kbd "<escape>") 'symex-mode-interface)
#+END_SRC

#+RESULTS:

** evil-lispy
- https://github.com/sp3ctum/evil-lispy
#+BEGIN_SRC emacs-lisp :tangle no
(use-package evil-lispy)
(add-hook 'emacs-lisp-mode-hook #'evil-lispy-mode)
#+END_SRC

** Go language setup
http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/
#+begin_src emacs-lisp :tangle yes
(use-package go-mode)

;(setenv "GOPATH" (concat *gs-mega-d* "/bin/go"))
(setenv "GOPATH" "/Users/gaurav/go")
(require 'flycheck)
(global-flycheck-mode 1)
;
;; for appropriate formatting
(defun my-go-mode-hook ()
  ; Call Gofmt before saving                                                    
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Godef jump key binding                                                      
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
  (auto-complete-mode 1)
	; Customize compile command to run go build
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v && go test -v && go vet"))
  )
(add-hook 'go-mode-hook 'my-go-mode-hook)

#+end_src


** C++ language setup
- https://tuhdo.github.io/c-ide.html
- sudo apt install global (to get GNU Global on Debian)
#+begin_src emacs-lisp :tangle yes
(use-package ggtags)
(require 'ggtags)

(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (ggtags-mode 1))))

(define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
(define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
(define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
(define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
(define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
(define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

(define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)

(setq-local imenu-create-index-function #'ggtags-build-imenu-index)
#+end_src

- autocompletion with clangd
https://clangd.llvm.org/installation.html
#+BEGIN_SRC emacs-lisp :tangle no
(use-package eglot)
(require 'eglot)
(add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
(add-hook 'c-mode-hook 'eglot-ensure)
(add-hook 'c++-mode-hook 'eglot-ensure)
#+END_SRC

- cpputils-cmake setup
https://github.com/redguardtoo/cpputils-cmake
#+BEGIN_SRC emacs-lisp :tangle no
(use-package auto-complete-clang)
(setq ac-clang-flags
      (mapcar (lambda (item)(concat "-I" item))
              (split-string
               "
/usr/include/c++/9
/usr/include/x86_64-linux-gnu/c++/9
/usr/include/c++/9/backward
/usr/lib/gcc/x86_64-linux-gnu/9/include
/usr/local/include
/usr/include/x86_64-linux-gnu
/usr/include
"
               )))
        

(use-package cpputils-cmake)

(add-hook 'c-mode-common-hook
          (lambda ()
            (if (derived-mode-p 'c-mode 'c++-mode)
                (cppcm-reload-all)
              )))
;; OPTIONAL, somebody reported that they can use this package with Fortran
(add-hook 'c90-mode-hook (lambda () (cppcm-reload-all)))
;; OPTIONAL, avoid typing full path when starting gdb
(global-set-key (kbd "C-c C-g")
 '(lambda ()(interactive) (gud-gdb (concat "gdb --fullname " (cppcm-get-exe-path-current-buffer)))))
;; OPTIONAL, some users need specify extra flags forwarded to compiler
;(setq cppcm-extra-preprocss-flags-from-user '("-I/usr/src/linux/include" "-DNDEBUG"))

#+END_SRC

** Evil Collection (for key bindings in most places)
- This one had some error when trying to install with command line
- Installed from list-packages instead. This worked on linux system (not working on Windows).

#+begin_src emacs-lisp :tangle yes
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src

** Deft
- following is for configuring deft mode
- key to launch deft; disable evil in deft mode

#+begin_src emacs-lisp :tangle yes
(use-package deft
  :bind ("C-c n" . deft)
  :commands (deft)
  :config
  (setq deft-directory (concat *gs-mega-d* "/Notes")
        deft-extensions '("org" "md" "txt")
        deft-default-extension "org"
        deft-recursive t
        deft-use-filename-as-title t
        deft-use-filter-string-for-filename t)
  (evil-set-initial-state 'deft-mode 'emacs))
#+end_src

** AUCTEX / LATEX - needs revamping
This adds a babel language 'latex-macros' which streamlines including latex header macros like \\newcommand{} which is seamlessly exported to HTML (in addition to LaTeX)
#+BEGIN_SRC emacs-lisp :cache yes :tangle yes
(add-to-list 'org-src-lang-modes '("latex-macros" . latex))

(defvar org-babel-default-header-args:latex-macros
  '((:results . "raw")
    (:exports . "results")))

(defun prefix-all-lines (pre body)
  (with-temp-buffer
    (insert body)
    (string-insert-rectangle (point-min) (point-max) pre)
    (buffer-string)))

(defun org-babel-execute:latex-macros (body _params)
  (concat
   (prefix-all-lines "#+LATEX_HEADER: " body)
   "\n#+HTML_HEAD_EXTRA: <div style=\"display: none\"> \\(\n"
   (prefix-all-lines "#+HTML_HEAD_EXTRA: " body)
   "\n#+HTML_HEAD_EXTRA: \\)</div>\n"))
#+END_SRC


- following is for latex: auctex setup
- taken from:
- https://www.reddit.com/r/emacs/comments/cd6fe2/how_to_make_emacs_a_latex_ide/
- This requires pdf-tools setup which has been done elsewhere

#+begin_src emacs-lisp :tangle no
(use-package auctex-latexmk
  :ensure t
  :config
  (auctex-latexmk-setup)
  (setq auctex-latexmk-inherit-TeX-PDF-mode t))

(use-package reftex
  :ensure t
  :defer t
  :config
  (setq reftex-cite-prompt-optional-args t)) ;; Prompt for empty optional arguments in cite

(use-package auto-dictionary
  :ensure t
  :init(add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode 1))))

(use-package company-auctex
  :ensure t
  :init (company-auctex-init))

(use-package tex
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :config (progn
	    (setq TeX-source-correlate-mode t)
	    (setq TeX-source-correlate-method 'synctex)
	    (setq TeX-auto-save t)
	    (setq TeX-parse-self t)
	    (setq-default TeX-master "paper.tex")
	    (setq reftex-plug-into-AUCTeX t)
	    (pdf-tools-install)
	    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
		  TeX-source-correlate-start-server t)
	    ;; Update PDF buffers after successful LaTeX runs
	    (add-hook 'TeX-after-compilation-finished-functions
		      #'TeX-revert-document-buffer)
	    (add-hook 'LaTeX-mode-hook
		      (lambda ()
			(reftex-mode t)
			(flyspell-mode t)))
	    ))
#+end_src


** =paperless= for document filing (mainly papers)
https://github.com/atgreen/paperless
#+begin_src emacs-lisp :tangle yes
(use-package ido-completing-read+)
(use-package paperless)
(custom-set-variables
 '(paperless-capture-directory (concat *gs-google-d* "/lit_repo/paperless/downloads"))
 '(paperless-root-directory (concat *gs-google-d* "/lit_repo/paperless/filed")))
#+end_src


** =org-ref= and =helm-bibtex= for bibliography management
https://github.com/jkitchin/org-ref/
https://github.com/jkitchin/org-ref/blob/master/org-ref.org
https://github.com/tmalsburg/helm-bibtex
#+begin_src emacs-lisp :tangle yes
(defvar gs-lit-repo (concat *gs-google-d* "/lit_repo"))
(use-package pdf-tools
  :ensure t
  :config
  (custom-set-variables '(pdf-tools-handle-upgrades nil)) ;upgrade using brew manually
  (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t)
  ;(define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
)

(use-package bibtex-completion)
(use-package helm-bibtex)
(use-package org-ref)
;(autoload 'helm-bibtex "helm-bibtex" "" t)
; location of bib file
(setq bibtex-completion-bibliography
      `(,(concat gs-lit-repo "/master_database.bib")))
; location of PDF files
(setq bibtex-completion-library-path 
      `(,(message gs-lit-repo)))
; Bibtex entry field that has file name information (for compatibility with JabRef)
(setq bibtex-completion-pdf-field "File")
; location of notes linked with PDF files (one file per publication)
; notes will be created as bibtex-key.org
(setq bibtex-completion-notes-path
      (concat gs-lit-repo "/my-notes/"))
(setq bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n")
; display formats
(setq bibtex-completion-display-formats
	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
)

; for automatically generating bibtex keys
(require 'bibtex)

(setq bibtex-autokey-year-length 4
	bibtex-autokey-name-year-separator "-"
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator "-"
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length 5
	org-ref-bibtex-hydra-key-binding (kbd "H-b"))

(define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)


(require 'org-ref)
(require 'org-ref-helm)
(require 'org-ref-scopus)
(require 'org-ref-wos)
(require 'org-ref-isbn)
(require 'doi-utils)

(setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
      org-ref-insert-cite-function 'org-ref-cite-insert-helm
      org-ref-insert-label-function 'org-ref-insert-label-link
      org-ref-insert-ref-function 'org-ref-insert-ref-link
      org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))

(define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
(define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
(define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)
#+end_src


** CSV mode
#+begin_src emacs-lisp :tangle yes
(use-package csv-mode)
#+end_src

** Atomic chrome for emacs
Enables editing any textbox in browser within an emacs window
https://github.com/alpha22jp/atomic-chrome
#+begin_src emacs-lisp :tangle yes
(use-package atomic-chrome)
(require 'atomic-chrome)
(atomic-chrome-start-server)
#+end_src

** HTTPD service for localhost
#+begin_src emacs-lisp :tangle yes
(use-package simple-httpd
  :ensure t)
(if *gs-setup-localhost* 
  (httpd-serve-directory "~/code/gaurav-iitgn.github.io/my-org-site/public"))

#+end_src


** Better window management with ace-window and winner-mode
#+begin_src emacs-lisp :tangle yes
(use-package ace-window)
(global-set-key (kbd "M-o") 'ace-window)
; set switch window keys to home row
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

(setq aw-dispatch-always t)

(winner-mode 1)

; start in maximized mode always
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src


** Project management
*** Dired customization, consult-find for fuzzy file search
- [[file:elisp/my-tag.el]]
#+begin_src emacs-lisp :tangle yes
;; write custom function to find in gs-google-d
;; C-x C-f does the job for the directory of current file
(defun gs/search ()
  "Opens base gdrive directory for fuzzy search"
  (interactive)
	(consult-find *gs-google-d*))

;; function to search through tags
;; currently shows an incrementally searched list of all tags from all_cats
;; TODO: add functionality to copy tags automatically
(defun gs/my-tag ()
	"Provide a completion list with description from all_cats.org"
	(interactive)
	(let ((lines (with-temp-buffer
	 							 (insert-file-contents "~/MEGA/Notes/all_cats.org")
								 (keep-lines "^\*.*:$")
	 							 (split-string (buffer-string) "\n" t))))
	
	 (insert (completing-read "Response: " lines))))
#+end_src

*** Create new entries in respective places for different things
#+begin_src emacs-lisp :tangle yes
;; create a new entry given a tag BASE
(defun gs/my-new-entry (BASE)
	"Create an entry and tag for a new entry."
	(find-file-other-window (concat *gs-mega-d* "/Notes/all_cats.org"))
	(goto-char (point-min))
	(search-forward BASE)
	(org-narrow-to-subtree)
	(goto-char (point-max))
	(setq base-tag (car (org-get-tags nil t)))
	(org-insert-heading)
	(insert "<<New   ")
	;; (message "%s\n" base-tag)
	(setq tag-split-rev (nreverse (s-split "_" base-tag)))
	(setq tag-last-new (1+ (string-to-number (car tag-split-rev))))
	(message "%s" tag-last-new)
	(setcar tag-split-rev (number-to-string tag-last-new))
	(insert (concat ":" (s-join "_" (nreverse tag-split-rev)) ":"))
  (org-beginning-of-line)
	(widen))

; create new entry for: reviewing a new journal article
(defun gs/new-journal-review ()
	(interactive)
	(gs/my-new-entry "209_2"))

; create new entry for: IITGN committee
(defun gs/new-iitgn-committee ()
	(interactive)
	(gs/my-new-entry "402"))

; create new entry for: external committee
(defun gs/new-external-committee ()
	(interactive)
	(gs/my-new-entry "503"))

; create new entry for: invited talk/panel
(defun gs/new-invited-talk ()
	(interactive)
	(gs/my-new-entry "502"))
#+end_src

*** Projectile
#+begin_src emacs-lisp :tangle yes
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode 1)
  :custom ((projectile-completion-system 'helm))
	:bind-keymap ("C-c p" . projectile-command-map)
	:init
  (setq projectile-project-search-path '("~/code/" "~/MEGA/code/"))
	(setq projectile-switch-project-action #'projectile-dired)
)
#+end_src

*** Neotree
To open directory tree on the left pane
#+begin_src emacs-lisp :tangle yes
(use-package neotree)
(require 'neotree)
#+end_src

** Magit
#+begin_src emacs-lisp :tangle yes
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
)

;(use-package evil-magit
;  :after magit
;)
#+end_src


** Maxima for symbolic math
#+begin_src emacs-lisp :tangle yes
(setq imaxima-maxima-program "maxima")
;; for imaxima
(push "/usr/local/share/emacs/site-lisp/maxima" load-path)


(autoload 'imaxima "imaxima" "Maxima frontend" t)
(autoload 'imath-mode "imath" "Interactive Math mode" t)

; add to babel for org-mode source block
(org-babel-do-load-languages
 'org-babel-load-languages
 '((maxima . t)))
#+end_src

* Start server
	
#+begin_src emacs-lisp :tangle no
;;(server-start)
#+end_src


* Personalized journal workflow functions
- https://emacs.stackexchange.com/questions/36478/generate-a-list-of-calendar-days-for-a-year
#+BEGIN_SRC emacs-lisp :tangle yes
(defun gs/my-date-list (start end &optional format limits)
	"Generate a list of days from START date to END date.
The list contains for each day the string generated
with `format-time-string' with format string FORMAT.
LIMITS is the list of changes indicated by extra header lines.
Valid list entries are pairs (month . \"%B\") and (year . \"%Y\")."
	(interactive "sStart time:\nsEnd time:")
	(unless format
		(setq format "%b %d, %a"))
	(when (stringp start)
		(setq start (parse-time-string start)))
	(when (stringp end)
		(setq end (parse-time-string end)))
	(setq start (cl-substitute 0 nil start)
				end (cl-substitute 0 nil end))
	(let ((time (apply #'encode-time start))
				(end-time (apply #'encode-time end))
				(one-day (days-to-time 1))
				(year (nth 5 start))
				fmt-year
				fmt-month
				(month (nth 4 start))
				ret)
		(when (setq fmt-year (assoc-string 'year limits))
			(setq ret (list (format-time-string (cdr fmt-year) start))))
		(when (setq fmt-month (assoc-string 'month limits))
			(setq ret (list (format-time-string (cdr fmt-month) start))))
		(while (null (time-less-p end-time time))
			(let* ((date (decode-time time))
						 (new-year (nth 5 date))
						 (new-month (nth 4 date)))
				(when (and (assoc-string 'year limits)
									 (/= new-year year))
					(setq ret (cons (format-time-string (cdr fmt-year) time) ret)
								year new-year))
				(when (and (assoc-string 'month limits)
									 (/= new-month month))
					(setq ret (cons (format-time-string (cdr fmt-month) time) ret)
								month new-month))
				(setq ret (cons (format-time-string format time) ret)
							time (time-add time one-day))))
		(nreverse ret)))

(defun gs/calendar-list (start end)
	"Create a calendar from START date to END date."
	(interactive "sStart date:\nsEnd date:")
	(with-current-buffer (get-buffer-create "*calendar-list*")
		(delete-region (point-min) (point-max))
		;(insert (mapconcat (lambda (date) (concat "* " date)) (gs/my-date-list start end nil nil) "\n"))
		(insert (mapconcat (lambda (date) (concat "* " date)) (gs/my-date-list start end nil '((month . "%B"))) "\n"))
		(display-buffer (current-buffer))))

(defun gs/calendar-year (year)
	"Create a calendar of a given year"
	(interactive "sYear:")
	(with-current-buffer (get-buffer-create "*calendar-list*")
		(delete-region (point-min) (point-max))
    (setq start (concat year "-01-01"))
    (setq end (concat year "-12-31"))
		(insert (mapconcat (lambda (date) (concat "* " date)) (my-date-list start end) "\n"))
		(display-buffer (current-buffer))))



(defun gs/create-journal-entry (full-date)
  "Create a journal entry. full-date is a string of format YYYY-MM-DD"
	(setq split-date-str (s-split "-" full-date))
	(setq split-date-num (mapcar 'string-to-number split-date-str))
  (setq year (nth 0 split-date-str))
  (setq month (nth 1 split-date-num))
  (setq date (nth 2 split-date-str))
  (setq fname (concat *gs-mega-d* "/Notes/" year ".org"))
	(setq fmt-date (concat (substring (calendar-month-name month) 0 3) " "
                 date ", "
                 (substring (calendar-day-name (list (nth 1 split-date-num)
                                                     (nth 2 split-date-num)
                                                     (nth 0 split-date-num)))
                  0 3)))
  (setq time (format-time-string "%H:%M "))
  (find-file-other-window fname)
  (with-current-buffer (current-buffer)
    (goto-char (point-min))
    (search-forward fmt-date)
    (save-restriction
      (org-narrow-to-subtree)
      (goto-char (point-max))
      (insert (concat "\n** " time))
      (evil-append 1)
    )
  )
)

(defun gs/new-journal-entry (&optional date)
  "Create new journal entry. Asks the date"
  (interactive)
  (gs/create-journal-entry (org-read-date))
)

(defun gs/today ()
  "Create a new entry under today's date in yearly journal"
  (interactive)
  (gs/create-journal-entry (org-read-date nil nil "today"))
)
#+END_SRC

* Email in emacs
Not using currently.
** Setup mu4e email related things
- Taken from: [[notanumber.io/2016-10-03/better-email-with-mu4e]]
- Taken from: [[www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html]]

#+begin_src emacs-lisp :tangle no
;; mu4e is to be setup only for non-Windows environments
(require 's)
;;(if (not (eq system-type 'windows-nt))
(if (not (eq 1 1))
  (progn
  
  (require 'mu4e)

  ;; mail address and use name
  (setq user-mail-address "gauravs@iitgn.ac.in"
        user-full-name "Gaurav Srivastava")

  ;;----------------------------------------------
  ;;mu4e configuration
  ;;----------------------------------------------
  ;; basic configuration
  (setq mail-user-agent 'mu4e-user-agent
        mu4e-mu-binary "/usr/bin/mu"
        mu4e-maildir "~/Maildir/gauravs"
        mu4e-drafts-folder "/[Gmail].Drafts"
        mu4e-sent-folder "/[Gmail].All Mail"
        mu4e-trash-folder "/[Gmail].Trash"
        mu4e-refile-folder "/[Gmail].All Mail"
        mu4e-get-mail-command "offlineimap"
        mu4e-update-interval 300
        mu4e-view-show-images t
        mu4e-html2text-command "w3m -dump -T text/html"
        mu4e-headers-include-related t
        mu4e-attachment-dir "~/Downloads"
        mu4e-sent-messages-behavior 'delete
        mu4e-view-show-images t
  )
  ;; use imagemagick if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; actions
  ;; enable viewing in browswer
  (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser) t)

  ;; spell check
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)

  ;; This hook correctly modifies the \Inbox and \Starred flags on email when they are marked.
  ;; Without it refiling (archiving) and flagging (starring) email won't properly result in
  ;; the corresponding gmail action.
  (add-hook 'mu4e-mark-execute-pre-hook
	    (lambda (mark msg)
	      (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox"))
		    ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
		    ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred")))))
  
  ;;email signature
  (setq mu4e-compose-signature
          (concat
            "Gaurav Srivastava\n"
            "Associate Professor, Civil Engineering, IITGN\n"
          )
  )

  ;; bookmarks for common searches 
  (setq mu4e-actions-tags-header "X-Keywords")
  (setq mu4e-bookmarks '(("tag:\\\\Inbox" "Inbox" ?i)
			                   ("flag:unread" "Unread messages" ?u)
			                   ("date:today..now" "Today's messages" ?t)
			                   ("date:7d..now" "Last 7 days" ?w)
			                   ("mime:image/*" "Messages with images" ?p)))

  ;;----------------------------------------------
  ;;SMTP configuration
  ;;----------------------------------------------
  (require 'smtpmail)
  (setq smtpmail-smtp-server "smtp.gmail.com"
        send-mail-function 'smtpmail-send-it
        message-send-mail-function 'smtpmail-send-it
        smtpmail-starttls-credentials '(("smtp.gmail.com" "587" nil nil))
        smtpmail-auth-credentials '(expand-file-name "~/.authinfo")
        smtpmail-smtp-service 587
        smtpmail-debug-info t
  )

  ;; add Cc and Bcc headers to the message buffer
  (setq message-default-mail-headers "Cc: \nBcc: \n")

  (setq message-kill-buffer-on-exit t)

  ;;----------------------------------------------
  ;;mu4e + org configuration
  ;;----------------------------------------------
  (require 'org-mu4e)
  (setq org-mu4e-link-query-in-headers-mode nil)
	

  ;;----------------------------------------------
  ;;capturing sent-mail in org
  ;;----------------------------------------------
	
))
#+end_src

** SMTP Send mail
#+begin_src emacs-lisp :tangle yes
;; mail address and use name
(setq user-mail-address "gauravs@iitgn.ac.in"
      user-full-name "Gaurav Srivastava")

;;----------------------------------------------
;;SMTP configuration
;;----------------------------------------------
(require 'smtpmail)
(setq smtpmail-smtp-server "smtp.gmail.com"
      send-mail-function 'smtpmail-send-it
      message-send-mail-function 'smtpmail-send-it
      smtpmail-starttls-credentials '(("smtp.gmail.com" "587" nil nil))
      smtpmail-auth-credentials '(expand-file-name "~/.authinfo")
      smtpmail-smtp-service 587
      smtpmail-debug-info t
)

;; add Cc and Bcc headers to the message buffer
(setq message-default-mail-headers "Cc: \nBcc: \n")

(setq message-kill-buffer-on-exit t)

; function to send org headline as an email
(defun gs/send-headline ()
  "Send current headline and contents of an org file (subtree) as an email"
  (interactive)
  (org-mime-org-subtree-htmlize))
#+end_src


** Setup notmuch email related things
- Taken from: [[kkatsuyuki.github.io/notmuch-conf]]
#+begin_src emacs-lisp :tangle no
;; notmuch is to be setup only for non-Windows environments
(require 's)
(if (not (eq 1 1))
;;(if (not (eq system-type 'windows-nt))
  (progn
  (require 'notmuch)

  ;; mail address and use name
  (setq mail-user-agent 'message-user-agent)
  (setq user-mail-address "gauravs@iitgn.ac.in"
        user-full-name "Gaurav Srivastava")

  ;;----------------------------------------------
  ;;notmuch configuration
  ;;----------------------------------------------
  (setq notmuch-search-oldest-first nil
        notmuch-fcc-dirs "~/Maildir/gauravs/[Gmail].Sent Mail"
        notmuch-mua-compose-in 'new-frame
  )

  ;;----------------------------------------------
  ;;SMTP configuration
  ;;----------------------------------------------
  (require 'smtpmail)
  (setq smtpmail-smtp-server "smtp.gmail.com"
        send-mail-function 'smtpmail-send-it
        message-send-mail-function 'smtpmail-send-it
        smtpmail-starttls-credentials '(("smtp.gmail.com" "587" nil nil))
        smtpmail-auth-credentials '(expand-file-name "~/.authinfo")
        smtpmail-smtp-service 587
        smtpmail-debug-info t
  )

  ;; add Cc and Bcc headers to the message buffer
  (setq message-default-mail-headers "Cc: \nBcc: \n")

  ;; postponed messages be put in draft directory
  (setq message-auto-save-directory "~/Maildir/gauravs/[Gmail].Drafts")
  (setq message-kill-buffer-on-exit t)

  ;; change the directory to store the sent mail
  (setq message-directory "~/Maildir/gauravs")
))
#+end_src

* KEY BINDINGS
- key bindings for org agenda and others
	
#+begin_src emacs-lisp :tangle yes
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cq" 'save-buffers-kill-emacs)

; open new frame with Meta-n
(global-set-key "\M-n" 'make-frame)

; toggle neotree left pane with Meta-t
; (this is originally bound to org-transport-words
(global-set-key "\M-t" 'neotree-toggle)

(setq org-log-done t)
#+end_src

* Registers for quickly opening certain files
- C-x r j e <reg name> to open
	
#+begin_src emacs-lisp :tangle yes
(set-register ?e (cons 'file "~/.emacs"))
(set-register ?b (cons 'file "~/.bashrc"))
(set-register ?l (cons 'file "~/.ledgerrc"))
(set-register ?E (cons 'file "~/code/dot-config/emacs-config.org"))
(set-register ?I (cons 'file (concat *gs-mega-d* "/Notes/000_Inbox.org")))
(set-register ?J (cons 'file (concat *gs-mega-d* "/ledger/data/journal.ledger")))
(set-register ?C (cons 'file (concat *gs-mega-d* "/Notes/all_cats.org")))
;(set-register ?C (cons 'file (concat *gs-mega-d* "/bin/gen_cat.csv")))
(set-register ?R (cons 'file (concat *gs-google-d* "/lit_repo/all_entries.bib")))
#+end_src

 
