#+TTITLE: Emacs Configuration
# Started from Harry Schwartz's configuration ideas
# https://emacs.readthedocs.io/en/latest/index.html
# Subsequently, I have copied from the config of many persons.

* Initialize package manager
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" .  "https://melpa.org/packages/") t)
(package-initialize)
#+end_src

* Configure =use-package=
This package is used to configure other packages. Installation of this package itself is handled in ~/.emacs itself.
Rest of the packages are managed by =use-package=. The following ensures =use-package= is able to handle things as expected

#+begin_src emacs-lisp
;; Ensure that use-package is installed.
;; If not installed, do so and to initial setup
(when (not (package-installed-p 'use-package))
	(package-refresh-contents)
	(package-install 'use-package))
	
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src


* Define some constants to make life easy later

#+begin_src emacs-lisp
(defconst *sys/gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a Windows system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst *sys/cygwin*
  (eq system-type 'cygwin)
  "Are we running on a Cygwin system?")

(defconst *sys/root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")

(defconst *rg*
  (executable-find "rg")
  "Do we have ripgrep?")

(defconst *python*
  (executable-find "python")
  "Do we have python?")

(defconst *python3*
  (executable-find "python3")
  "Do we have python3?")

(defconst *mvn*
  (executable-find "mvn")
  "Do we have Maven?")

(defconst *gcc*
  (executable-find "gcc")
  "Do we have gcc?")

(defconst *git*
  (executable-find "git")
  "Do we have git?")

(defconst *pdflatex*
  (executable-find "pdflatex")
  "Do we have pdflatex?")
#+end_src


* Information about myself

#+begin_src emacs-lisp
(setq user-full-name "Gaurav Srivastava"
      user-mail-address "it.gaurav@gmail.com")
#+end_src


* UI preferences
** General preferences
Display time in the emacs status bar and set the default character encoding.
#+begin_src emacs-lisp
(display-time-mode)
;;this applies everywhere
(set-language-environment "UTF-8")
#+end_src

Change "yes or no" to "y or n" for faster response.
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Display backtrace on error by default.
#+begin_src emacs-lisp :tangle no
(setq debug-on-error t)
#+end_src

Default image width
#+begin_src emacs-lisp
(setq org-image-actual-width (list 400))
#+end_src

** Set a different backup directory to prevent cluttering
https://stackoverflow.com/questions/2680389/how-to-remove-all-files-ending-with-made-by-emacs/2680682
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
#+end_src


** Swap cmd and option key on Mac (make cmd the meta key)
https://apple.stackexchange.com/questions/12087/emacs-on-mac-os-x-to-alt-or-command/53551
#+begin_src emacs-lisp
(cond
 (*sys/mac* ; Mac OS X
	(progn
		(setq mac-option-key-is-meta nil)
		(setq mac-command-key-is-meta t)
		(setq mac-command-modifier 'meta)
		(setq mac-option-modifier nil)
		(message "Mac OS X"))))
#+end_src

** Change the color and type of point. Also, stop blinking.
Disabling for now to see if it enhances working speed.
#+begin_src emacs-lisp
(setq evil-emacs-state-cursor '("blue" box)) 
(setq evil-normal-state-cursor '("firebrick" box)) 
(setq evil-visual-state-cursor '("green" box))
(setq evil-insert-state-cursor '("darkgreen" box))
(setq evil-replace-state-cursor '("red" bar))
(setq evil-operator-state-cursor '("red" hollow))
(blink-cursor-mode 0)
#+end_src

** Increase default font size to 11 pt.
- values given are in 1/10 pt; so, for 14pt ==> 140
- this is now set in the .emacs file directly as different machines have different optimal font sizes

#+begin_src emacs-lisp
(set-face-attribute 'default nil :height 110)
#+end_src

** Disable tiny scroll bar of minimuffer window.

#+begin_src emacs-lisp
(set-window-scroll-bars (minibuffer-window) nil nil)
#+end_src


** Highlight the cursor when the window scrolls.
Disabling for speed.
#+begin_src emacs-lisp :tangle no
(use-package beacon
  :ensure t
  :diminish beacon-mode
  :config
  (beacon-mode t))
#+end_src

** Enable leuven theme and configure doom modeline
Change mode-line color to something that looks better with the doom-mode-line.
#+begin_src emacs-lisp 
(load-theme 'leuven t)
(use-package all-the-icons)
(use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1)
  (setq doom-modeline-height 8)
)
(set-face-background 'mode-line "black")
(set-face-background 'mode-line-inactive "dark gray")

#+end_src

** Use doom themes
Didn't find anything better then leuven to my liking.
#+begin_src emacs-lisp :tangle no
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one-light t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

#+end_src

** Line numbers and such.
- Always show line numbers and column numbers by default.

#+begin_src emacs-lisp
(if (>= emacs-major-version 26)
		(global-display-line-numbers-mode)
	  (global-linum-mode)
)

(column-number-mode)
(show-paren-mode 1)
(global-visual-line-mode t)
#+end_src

** Use visual bell (flash the mode line instead of a bell or whole frame).

#+begin_src emacs-lisp
(setq visible-bell nil
      ring-bell-function 'gs/flash-mode-line)
(defun gs/flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+end_src

** Highlight the current line.

#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

** Convert tabs to spaces, reduce default tab width to 2
#+begin_src emacs-lisp
  (setq-default tab-width 2)
	;;(setq tab-width 2)
#+end_src

** Auto-scroll compilation window.

#+begin_src emacs-lisp
  (setq compilation-scroll-output t)
#+end_src

** Set straight the undo and redo functionality in evil.

#+begin_src emacs-lisp
  (use-package undo-tree)
  (global-undo-tree-mode)
  ;; this is for undo and redo in evil
  ;; following works with emacs earlier versions
  (eval-after-load 'evil-maps
    '(progn
      (define-key evil-normal-state-map "u" 'undo-tree-undo)
      (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
     )
  )
#+end_src

** For coloring matching parentheses.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters)
#+end_src

** Line wrap in LaTeX mode.

#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'auto-fill-mode)
#+end_src

** Better scrolling by scrolling only by a line at a time.

#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src
** Spell check enable in text mode
Download hunspell from here: http://wordlist.aspell.net/dicts/
#+begin_src emacs-lisp
	;; spell checker program
	(if *sys/win32*
		(setq ispell-program-name "~/MEGA/hunspell-win32/bin/hunspell")
		(setq ispell-program-name "hunspell"))

	(use-package flyspell
		:ensure t
		:init
		(add-hook 'org-mode-hook
							(lambda () (flyspell-mode t))))

#+end_src


** Set default applications for opening the relevant files
- Within Cygwin, open everything with cygstart.exe
	- It passess it on the Windows and appropriate application is triggered

#+begin_src emacs-lisp
	(use-package dired-open)
	 (if *sys/cygwin*
		 (progn (setq dired-open-extensions
					 '(
							("doc"  . "cygstart")
							("docx" . "cygstart")
							("xls"  . "cygstart")
							("xlsx" . "cygstart")
							("html" . "cygstart")
							("htm"  . "cygstart")
							("pdf"  . "cygstart")
						)
						)
						(setq org-file-apps
					 '(
							(auto-mode . emacs)
							("\\.x?html?\\'" . "cygstart %s")
							("\\.pdf\\'" . "cygstart %s")
						)
						)
			);progn
		);if-cygwin

; disable validation link in HTML export
(setq org-html-validation-link nil)
#+end_src


* Utilities
** Function to reload dot-emacs without closing emacs.
#+begin_src emacs-lisp
(defun gs/reload-dot-emacs ()
  "Save the .emacs buffer if needed, then reload .emacs."
  (interactive)
  (let ((dot-emacs "~/.emacs"))
    (and (get-file-buffer dot-emacs)
         (save-buffer (get-file-buffer dot-emacs)))
    (load-file dot-emacs))
  (message "Re-initialized!"))
#+end_src

** Function to rename the current buffer.
Source: http://www.whattheemacsd.com/.
#+begin_src emacs-lisp
(defun gs/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'."
                   name (file-name-nondirectory new-name)))))))

#+end_src


** Which key
#+begin_src elisp
(use-package which-key
  :ensure t
  :defer 10
  :diminish which-key-mode
  :config
  (which-key-mode 1))
#+end_src


* Enable, disable and configure packages
** To inherit executable paths from Shell
Of course, this will not work for windows.
#+begin_src emacs-lisp
(if (not *sys/win32*)
(progn
	(use-package exec-path-from-shell)
	(exec-path-from-shell-initialize)
))
#+end_src

** Load relevant languages in org babel

#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((python . t))
)
#+end_src

** YASnippet for inserting structured templates

#+begin_src emacs-lisp
(use-package yasnippet)
(require 'yasnippet)
(add-to-list 'yas-snippet-dirs "~/code/dot-config/yas-snippets")
(yas-global-mode 1)
#+end_src


** 's' - string manipulating package

#+begin_src emacs-lisp
(use-package s)
(require 's)
#+end_src

** EVIL -- enable

#+begin_src emacs-lisp
(setq evil-want-integration t)
(setq evil-want-keybinding nil)
(use-package evil)
(require 'evil)
(evil-mode t)
;; Make movement keys behave appropriately when visual-line-mode wraps lines
;; https://stackoverflow.com/questions/20882935/how-to-move-between-visual-lines-and-move-past-newline-in-evil-mode
(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
; Make horizontal movement cross lines                                    
(setq-default evil-cross-lines t)
#+end_src

** ORG -- enable and configure different things

#+begin_src emacs-lisp
(require 'org)
#+end_src

*** set org directory, agenda files etc

#+begin_src emacs-lisp
(defvar gs/org-root-dir (concat gs-mega-dir "/Notes"))
(setq org-directory gs/org-root-dir)
(setq org-agenda-files (list gs/org-root-dir))

;; setup refile to use all agenda files
(setq org-refile-targets
  '((nil :maxlevel . 3)
    (org-agenda-files :maxlevel . 3)))
		
;; enable use of tags from all agenda files
(setq org-complete-tags-always-offer-all-agenda-tags t)
#+end_src

*** setup of inbox and other files, capture templates, etc.

#+begin_src emacs-lisp
(defvar gs/org-inbox-file (concat gs-mega-dir "/Notes/000_Inbox.org"))

;; t is for quick TODO capture
;; 'e' is for email TODO capture and 'r' is for email archive capture (if an email is related to an ongoing issue)
;; Both 'e' and 'r' rely on a browser plugin (GS-ORG-CAPTURE) that copies Email subject and URL for use by the capture template (%x)
(setq org-capture-templates
  '(("t" "Quick Todo" entry (file+headline gs/org-inbox-file "Quick Todos")
		 "* TODO %^{Task}\n" :immediate-finish t)
    ("i" "Thoughts and Ideas" entry (file+headline gs/org-inbox-file "Ideas")
		 "* %^{Idea}\n" :immediate-finish t)
    ("e" "Email Todo" entry (file+headline gs/org-inbox-file "Dump from GMail")
		 "* TODO %x\n")
    ("r" "Email Resource" entry (file+headline gs/org-inbox-file "Dump from GMail")
		 "* %x\n")
    ("m" "Meeting" entry (file+headline gs/org-inbox-file "Meetings")
		 "* %t %?")
	 ))
#+end_src


*** todo states

#+begin_src emacs-lisp
(setq org-todo-keywords 
  '((sequence "TODO(t)" 
              "DOING(g@)"
              "FOLLOWUP(f@)" 
              "DISCUSS(d@)"
							"|"
							"DONE(x@/!)"
							"CANCELLED(c@/!)"
)))
(setq org-todo-keyword-faces
   '(("TODO"     . (:foreground "red" :weight "bold"))
	   ("DOING"    . (:foreground "cyan" :weight "bold"))
	   ("FOLLOWUP" . (:foreground "orange" :weight "bold"))
     ("DISCUSS"  . (:foreground "blue" :weight "bold"))
     ("DONE"     . (:foreground "green" :weight "bold"))
     ("CANCELLED". (:foreground "gray" :weight "bold"))
))
#+end_src

*** Set ORG to be the default major mode

#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
#+end_src

*** Use sticky headers

#+begin_src emacs-lisp
(use-package org-sticky-header
 :hook (org-mode . org-sticky-header-mode)
 :config
 (setq-default
  org-sticky-header-full-path 'full
  ;; Child and parent headings are seperated by a /.
  org-sticky-header-outline-path-separator "/"))
#+end_src

*** For pretty bullets and proportional font sizes

#+begin_src emacs-lisp
(use-package org-bullets
	:init
	(add-hook 'org-mode-hook 'org-bullets-mode))
;; hide slash and stars for italics and bold
(setq org-hide-emphasis-markers t)

;; https://zzamboni.org/post/beautifying-org-mode-in-emacs/
;; proportional font sizes
;;  (let* ((variable-tuple
;;            (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
;;                  ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
;;                  ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
;;                  ((x-list-fonts "Verdana")         '(:font "Verdana"))
;;                  ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
;;                  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
;;           (base-font-color     (face-foreground 'default nil 'default))
;;           (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
;;  
;;      (custom-theme-set-faces
;;       'user
;;       `(org-level-8 ((t (,@headline ,@variable-tuple))))
;;       `(org-level-7 ((t (,@headline ,@variable-tuple))))
;;       `(org-level-6 ((t (,@headline ,@variable-tuple))))
;;       `(org-level-5 ((t (,@headline ,@variable-tuple))))
;;       `(org-level-4 ((t (,@headline ,@variable-tuple :height 0.80))))
;;       `(org-level-3 ((t (,@headline ,@variable-tuple :height 0.90))))
;;       `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.00))))
;;       `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.10))))
;;       `(org-document-title ((t (,@headline ,@variable-tuple :height 1.3 :underline nil))))))

;; enable proportional fonts for org mode
;;(add-hook 'org-mode-hook 'variable-pitch-mode)

#+end_src

*** syntax highlighting in source blocks; disable adaptive indentation

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-adapt-indentation nil)
(setq org-src-preserve-indentation t)
#+end_src


*** use images/screenshots

#+begin_src emacs-lisp
(use-package org-download)
(setq org-startup-with-inline-images t)
#+end_src

*** use evil with org agendas

#+begin_src emacs-lisp
(use-package evil-org
  ;added as temporary fix to a bug
  ;https://github.com/Somelauw/evil-org-mode/issues/93
  :init
  (fset 'evil-redirect-digit-argument 'ignore)
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda() (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

;; RETURN will follow links in orgmode files
(setq org-return-follows-link t)
#+end_src

*** custom functions to handle documents, workflows and book keeping

#+begin_src emacs-lisp
;; suggested by Nicolas Goaziou
;; taken from: https://kitchingroup.cheme.cmu.edu/blog/2013/05/05/Getting-keyword-options-in-org-files/
;; gets value of org keywords like TITLE, DATE, etc.
;; allows any customized #+PROPERTY:value
(defun gs/get-org-kwds ()
  "parse the buffer and return a cons list of (property . value)
		from lines like: #+PROPERTY: value"
  (org-element-map (org-element-parse-buffer 'element) 'keyword
                   (lambda (keyword) (cons (org-element-property :key keyword)
                                           (org-element-property :value keyword)))
  )
)

(defun gs/get-org-kwd (KEYWORD)
  "get the value of a KEYWORD in the form of #+KEYWORD: value"
  (interactive)
  (cdr (assoc KEYWORD (gs/get-org-kwds)))
)

#+end_src


#+begin_src emacs-lisp
(defun gs/open-resource-dir ()
"Opens document resource directory of the current headline within the org file"
  (interactive)
	
	;; obtain the DOCDIR (google / mega / dropbox / nas) from the PROPERTIES
  ;; get the base directory from DOCDIR keyword of the file
  ;; this specifies whether the related documents are on MEGA, Dropbox,
  ;; Google Drive or NAS 
  ;; this keyword is DOCDIR -- must be defined in the PROPERTIES of the headline
  ;;get the identifier for file location
  (setq mydocdirstr (car (org-property-values "DOCDIR")))
  (setq mybasedir gs-google-dir)
  ;;set full base directory depending on the file location identifier
  (cond 
    ((equal mydocdirstr "google")(setq mybasedir gs-google-dir))
    ((equal mydocdirstr "dropbox")(setq mybasedir gs-dropbox-dir))
    ((equal mydocdirstr "mega")(setq mybasedir gs-mega-dir))
    ((equal mydocdirstr "nas")(setq mybasedir gs-nas-dir))
  )
	;; obtain the FIRST tag of the headline
  ;; this should be in the format XXX_Y_Z where X, Y, Z are all numbers (e.g. 405_2_1)
	;; it is assumed that the classified will be the FIRST tag among others for the headine
	(setq mytag (car (org-get-tags)))

	;; replace _ with . to enable mapping with directory names
  (setq mytag (s-replace "_" "." mytag))

  ;; build directory name
  (setq mydir (concat mybasedir "/" mytag "_*"))
	
  ;; expand the wildcard to get full name
	;; file-expand-wildcards returns a list; pick the first element with car
  ;;(setq mydir (file-expand-wildcards mydir))
  (setq mydir (car (file-expand-wildcards mydir)))


  ;; open this directory in a new frame of emacs (within dired)
  ;;(dired-other-frame mydir)

  ;; open this directory with system's file viewer
  ;; replaces spaces with escaped ones for use with system's file viewer
  ;;(if (s-match " " mydir) ;;it should be like this ideally
  (if (and *sys/mac* (equal mydocdirstr "google")) ;this will have a space on Mac
		(setq mydirsys (s-replace " " "\\ " mydir))
		(setq mydirsys mydir)
	)

  ;;on Windows, replace / with \ in filepath before sending it to explorer
  (if *sys/win32*
		(setq mydirsys (s-replace "/" "\\" mydir))
	)
  (shell-command (concat gs-file-manager mydirsys))
)
#+end_src


*** Custom Agenda views and customized behavior
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((agenda ""
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-deadline-warning-days 0)))
          (todo "DOING"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nActive Tasks\n")))
          (todo "TODO"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks to be Planned\n")))
          (todo "FOLLOWUP"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nFollow ups\n")))
          (todo "DISCUSS"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTo be Discussed with someone\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n"))))))
);;setq

(setq org-agenda-todo-ignore-scheduled 'all)
(setq org-agenda-todo-ignore-deadlines 'all)
(setq org-agenda-todo-ignore-timestamps 'all)

#+end_src


** Ledger and its configuration
#+begin_src emacs-lisp
	;; (use-package company)
	;; (use-package company-ledger
	;; 	:ensure company
	;; 	:init
	;; 	(with-eval-after-load 'company
	;; 		(add-to-list 'company-backends  'company-ledger))
	;; 	)

	;; https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money/
	;; https://github.com/yradunchev/ledger
	(use-package ledger-mode)
	(use-package flycheck-ledger  :after ledger-mode)
	(setq ledger-binary-path gs-ledger-executable)
	(add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))
	(add-hook 'ledger-mode-hook
						(lambda ()
							;; (company-mode)
							(setq-local tab-always-indent 'complete)
							(setq-local completion-cycle-threshold t)
							(setq-local ledger-complete-in-steps t)
							)
						)

	;; capture templates for org
  (setq gs-ledger-file (concat gs-mega-dir "/ledger/data/journal.ledger"))
	(setq org-capture-templates
				(append '(("l" "Ledger entries")
									("lc" "SBI Credit Card" plain
									 (file gs-ledger-file)
									 "%(org-read-date) %^{Description}
		Expenses:%^{Account}  %^{Amount}
		Liabilities:CC:SBI
	")
									("lb" "SBI Savings Bank Account" plain
									 (file gs-ledger-file)
									 "%(org-read-date) * %^{Description}
		Expenses:%^{Account}  %^{Amount}
		Assets:Saving:SBIGN
	"))
								org-capture-templates))

#+end_src

** Helm and its configuration
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :bind (("M-x"     . helm-M-x)
         ("M-y"     . helm-show-kill-ring)
         ("C-x b"   . helm-mini)
         ("C-x C-b" . helm-buffers-list)
         ("C-x C-f" . helm-find-files)
				 ("C-c h g" . helm-google-suggest)
         ("C-h r"   . helm-info-emacs)
         ("C-h l" . helm-locate_library)
  ;;       ("C-x r b" . helm-filtered-bookmarks)  ; Use helm bookmarks
         ("C-c f"   . helm-recentf)
         ("C-c j"   . helm-imenu)
         ("C-c C-r" . helm-resume)
  ;;       :map helm-map
  ;;       ("<tab>" . helm-execute-persistent-action)  ; Rebind tab to run persistent action
  ;;       ("C-i"   . helm-execute-persistent-action)  ; Make TAB work in terminals
  ;;       ("C-z"   . helm-select-action)  ; List actions
  ;;       :map shell-mode-map  ;; Shell history
  ;;       ("C-c C-l" . helm-comint-input-ring)
         )
  :config
  ;; See https://github.com/bbatsov/prelude/pull/670 for a detailed
  ;; discussion of these options.
  (setq helm-split-window-inside-p            t
        helm-buffers-fuzzy-matching           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t)

  ;;for speed
  ;;(setq helm-google-suggest-use-curl-p t)

  ;; keep follow-mode in between helm sessions once activated
  (setq helm-follow-mode-persistent t)

  ;; Smaller helm window
  (setq helm-autoresize-max-height 30)
  (setq helm-autoresize-min-height 0)
  (helm-autoresize-mode 1)

  ;; Don't show details in helm-mini for tramp buffers
  (setq helm-buffer-skip-remote-checking t)

  (require 'helm-bookmark)
  ;; Show bookmarks (and create bookmarks) in helm-mini
  (setq helm-mini-default-sources '(helm-source-buffers-list
                                    helm-source-recentf
                                    helm-source-bookmarks
                                    helm-source-bookmark-set
                                    helm-source-buffer-not-found))

  ;;(substitute-key-definition 'find-tag 'helm-etags-select global-map)
)
(helm-mode 1)

;this needs some fixing. does not work on MacOS
;Error: get-device-terminal "ns" does not exist 
;display helm in its own frame
;(setq helm-display-function 'helm-display-buffer-in-own-frame
      ;helm-display-buffer-reuse-frame t
      ;helm-use-undecorated-frame-option t)
#+end_src


** Matlab 
Set this only when ~matlab-mode~ has been installed.
https://sourceforge.net/p/matlab-emacs/src/ci/master/tree/INSTALL
#+begin_src emacs-lisp
(if (file-directory-p "~/code/matlab/matlab-emacs-src")
  (progn
		(add-to-list 'load-path "~/code/matlab/matlab-emacs-src")
		(require 'matlab-load)
		(setq matlab-shell-command "~/code/matlab_emacs_wrapper")
		(setq matlab-shell-command-switches (list "-nodesktop"))
		;; setup matlab in babel
		(setq org-babel-default-header-args:matlab
		'((:results . "output") (:session . "*MATLAB*")))

		;; list of babel languages
		(org-babel-do-load-languages
		'org-babel-load-languages
		'((matlab . t)
		))
	);progn
);if
#+end_src


#+begin_src emacs-lisp :tangle no
;(load-library "matlab-load")
;(setq matlab-shell-command "/Applications/MATLAB_R2020a.app/bin/matlab")
;(customize-set-variable 'matlab-shell-command "~/code/matlab_emacs_wrapper")
; add for org-mode babel
(add-to-list
'auto-mode-alist
'("\\.m$" . matlab-mode))
(setq matlab-indent-function t)

;;(use-package matlab-mode)
	(autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
	;;tried but doesn't work on windows
	(if *sys/win32*
		(setq matlab-shell-command "C:\\Program Files\\MATLAB\\R2017a\\bin\\MATLAB.exe"))
	(if (or *sys/mac* *sys/linux*)
		(setq matlab-shell-command "matlab"))


#+end_src

** Python configuration
#+begin_src emacs-lisp

(setq python-shell-interpreter "python3")


;(use-package elpy
;  :ensure t
;  :defer t
;  :init
;  (advice-add 'python-mode :before 'elpy-enable)
;	(setq elpy-rpc-python-command "python3")
;)

;; the following has been set as the system variable $WORKON_HOME 
;; (setq elpy-rpc-virtualenv-path "/cygdrive/c/users/gaurav/cyg_python_venv")

(setq python-indent-offset 2)

#+end_src

** Setup language server for relevant ones
#+begin_src elisp
(use-package lsp-mode)
(require 'lsp-mode)
(add-hook 'go-mode-hook 'lsp-deferred)
; install server: go get golang.org/x/tools/gopls@latest
(add-hook 'sh-mode-hook 'lsp-deferred)
; install server: npm i -g bash-language-server (after brew install npm)
(add-hook 'python-mode-hook 'lsp-deferred)
; install server: pip3 install python-language-server[all]
#+end_src
** Yaml
#+begin_src elisp
(use-package yaml)
(use-package yaml-mode)
#+end_src
** Go language setup
http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/
#+begin_src elisp
(use-package go-mode)

;(setenv "GOPATH" (concat gs-mega-dir "/bin/go"))
(setenv "GOPATH" "/Users/gaurav/go")
(require 'flycheck)
(global-flycheck-mode 1)
;
;; for appropriate formatting
(defun my-go-mode-hook ()
  ; Call Gofmt before saving                                                    
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Godef jump key binding                                                      
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
  (auto-complete-mode 1)
	; Customize compile command to run go build
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v && go test -v && go vet"))
  )
(add-hook 'go-mode-hook 'my-go-mode-hook)

#+end_src


** Evil Collection (for key bindings in most places)
- This one had some error when trying to install with command line
- Installed from list-packages instead. This worked on linux system (not working on Windows).

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src

** Deft
- following is for configuring deft mode
- key to launch deft; disable evil in deft mode

#+begin_src emacs-lisp
(use-package deft
  :bind ("C-c n" . deft)
  :commands (deft)
  :config
  (setq deft-directory (concat gs-mega-dir "/Notes")
        deft-extensions '("org" "md" "txt")
        deft-default-extension "org"
        deft-recursive t
        deft-use-filename-as-title t
        deft-use-filter-string-for-filename t)
  (evil-set-initial-state 'deft-mode 'emacs))
#+end_src

** AUCTEX / LATEX - needs revamping
This adds a babel language 'latex-macros' which streamlines including latex header macros like \\newcommand{} which is seamlessly exported to HTML (in addition to LaTeX)
#+BEGIN_SRC elisp :cache yes
(add-to-list 'org-src-lang-modes '("latex-macros" . latex))

(defvar org-babel-default-header-args:latex-macros
  '((:results . "raw")
    (:exports . "results")))

(defun prefix-all-lines (pre body)
  (with-temp-buffer
    (insert body)
    (string-insert-rectangle (point-min) (point-max) pre)
    (buffer-string)))

(defun org-babel-execute:latex-macros (body _params)
  (concat
   (prefix-all-lines "#+LATEX_HEADER: " body)
   "\n#+HTML_HEAD_EXTRA: <div style=\"display: none\"> \\(\n"
   (prefix-all-lines "#+HTML_HEAD_EXTRA: " body)
   "\n#+HTML_HEAD_EXTRA: \\)</div>\n"))
#+END_SRC


- following is for latex: auctex
- taken from: https://tex.stackexchange.com/questions/461851/sumatra-pdf-forward-and-inverse-search-emacs

#+begin_src emacs-lisp
(setq TeX-PDF-mode t)
(setq TeX-source-correlate-mode t)
(setq TeX-source-correlate-method 'synctex)
(setq TeX-view-program-list '(("Sumatra PDF" ("\"C:/Program Files/SumatraPDF/SumatraPDF.exe\" -reuse-instance" (mode-io-correlate " -forward-search %b %n ") " %o"))))
(eval-after-load 'tex
 '(progn
   (assq-delete-all 'output-pdf TeX-view-program-selection)
   (add-to-list 'TeX-view-program-selection '(output-pdf "Sumatra PDF"))))
#+end_src


- following is from: https://william.famille-blum.org/blog/static.php?page=static081010-000413
	
#+begin_src emacs-lisp
;;(custom-set-variables '(TeX-source-correlate-method (quote synctex)) '(TeX-source-correlate-mode t) '(TeX-source-correlate-start-server t) '(TeX-view-program-list (quote (("Sumatra PDF" "\"C:/Program Files/SumatraPDF/SumatraPDF.exe\" -reuse-instance %o")))))(custom-set-faces)
;;(eval-after-load 'tex
 ;;'(progn
   ;;(assq-delete-all 'output-pdf TeX-view-program-selection)
   ;;(add-to-list 'TeX-view-program-selection '(output-pdf "Sumatra PDF")))
 ;;)
#+end_src


** =paperless= for document filing (mainly papers)
https://github.com/atgreen/paperless
#+begin_src elisp
(use-package ido-completing-read+)
(use-package paperless)
(custom-set-variables
 '(paperless-capture-directory "/Users/gaurav/Google Drive/My Drive/New_System/lit_repo/paperless/downloads")
 '(paperless-root-directory "/Users/gaurav/Google Drive/My Drive/New_System/lit_repo/paperless/filed"))
#+end_src


** =org-ref= and =helm-bibtex= for bibliography management
https://github.com/jkitchin/org-ref/
https://github.com/jkitchin/org-ref/blob/master/org-ref.org
https://github.com/tmalsburg/helm-bibtex
#+begin_src elisp :tangle no
(defvar gs-lit-repo (concat gs-google-dir "/lit_repo"))
(use-package pdf-tools
  :ensure t
  :config
  (custom-set-variables 
    '(pdf-tools-handle-upgrades nil)) ;upgrade using brew manually
  (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t)
  ;(define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
)

(use-package bibtex-completion)
(use-package helm-bibtex)
(use-package org-ref)
;(autoload 'helm-bibtex "helm-bibtex" "" t)
; location of bib file
(setq bibtex-completion-bibliography
      '("/Users/gaurav/Google Drive/My Drive/New_System/lit_repo/master_database.bib"))
; location of PDF files
(setq bibtex-completion-library-path 
      '("/Users/gaurav/Google Drive/My Drive/New_System/lit_repo"))
; Bibtex entry field that has file name information (for compatibility with JabRef)
(setq bibtex-completion-pdf-field "File")
; location of notes linked with PDF files (one file per publication)
; notes will be created as bibtex-key.org
(setq bibtex-completion-notes-path
      "/Users/gaurav/Google Drive/My Drive/New_System/lit_repo/my-notes")
(setq bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n")
; display formats
(setq bibtex-completion-display-formats
	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
)

; for automatically generating bibtex keys
(require 'bibtex)

(setq bibtex-autokey-year-length 4
	bibtex-autokey-name-year-separator "-"
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator "-"
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length 5
	org-ref-bibtex-hydra-key-binding (kbd "H-b"))

(define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)


(require 'org-ref)
(require 'org-ref-helm)
(require 'org-ref-scopus)
(require 'org-ref-wos)
(require 'org-ref-isbn)
(require 'doi-utils)

(setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
      org-ref-insert-cite-function 'org-ref-cite-insert-helm
      org-ref-insert-label-function 'org-ref-insert-label-link
      org-ref-insert-ref-function 'org-ref-insert-ref-link
      org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))

(define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
(define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
(define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)
#+end_src


** CSV mode
#+begin_src elisp
(use-package csv-mode)
#+end_src

** Atomic chrome for emacs
Enables editing any textbox in browser within an emacs window
https://github.com/alpha22jp/atomic-chrome
#+begin_src elisp
(use-package atomic-chrome)
(require 'atomic-chrome)
(atomic-chrome-start-server)
#+end_src

** HTTPD service for localhost
#+begin_src elisp
(use-package simple-httpd
  :ensure t)
(httpd-serve-directory "~/code/gaurav-iitgn.github.io/my-org-site/public")

#+end_src


** Better window management with ace-window and winner-mode
#+begin_src elisp
(use-package ace-window)
(global-set-key (kbd "M-o") 'ace-window)
; set switch window keys to home row
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

(setq aw-dispatch-always t)

(winner-mode 1)

; start in maximized mode always
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src


** Projectile for project management
#+begin_src elisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode 1)
  :custom ((projectile-completion-system 'helm))
	:bind-keymap ("C-c p" . projectile-command-map)
	:init
  (when (file-directory-p "~/code")
    (setq projectile-project-search-path '("~/code")))
		(setq projectile-switch-project-action #'projectile-dired)
)
#+end_src

** Magit
#+begin_src elisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
)

;(use-package evil-magit
;  :after magit
;)
#+end_src


** Maxima for symbolic math
#+begin_src elisp
(setq imaxima-maxima-program "maxima")
;; for imaxima
(push "/usr/local/share/emacs/site-lisp/maxima" load-path)


(autoload 'imaxima "imaxima" "Maxima frontend" t)
(autoload 'imath-mode "imath" "Interactive Math mode" t)

; add to babel for org-mode source block
(org-babel-do-load-languages
 'org-babel-load-languages
 '((maxima . t)))
#+end_src

* Start server
	
#+begin_src emacs-lisp
;;(server-start)
#+end_src


* Email in emacs
Not using currently.
** Setup mu4e email related things
- Taken from: [[notanumber.io/2016-10-03/better-email-with-mu4e]]
- Taken from: [[www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html]]

#+begin_src emacs-lisp
;; mu4e is to be setup only for non-Windows environments
(require 's)
;;(if (not (eq system-type 'windows-nt))
(if (not (eq 1 1))
  (progn
  
  (require 'mu4e)

  ;; mail address and use name
  (setq user-mail-address "gauravs@iitgn.ac.in"
        user-full-name "Gaurav Srivastava")

  ;;----------------------------------------------
  ;;mu4e configuration
  ;;----------------------------------------------
  ;; basic configuration
  (setq mail-user-agent 'mu4e-user-agent
        mu4e-mu-binary "/usr/bin/mu"
        mu4e-maildir "~/Maildir/gauravs"
        mu4e-drafts-folder "/[Gmail].Drafts"
        mu4e-sent-folder "/[Gmail].All Mail"
        mu4e-trash-folder "/[Gmail].Trash"
        mu4e-refile-folder "/[Gmail].All Mail"
        mu4e-get-mail-command "offlineimap"
        mu4e-update-interval 300
        mu4e-view-show-images t
        mu4e-html2text-command "w3m -dump -T text/html"
        mu4e-headers-include-related t
        mu4e-attachment-dir "~/Downloads"
        mu4e-sent-messages-behavior 'delete
        mu4e-view-show-images t
  )
  ;; use imagemagick if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; actions
  ;; enable viewing in browswer
  (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser) t)

  ;; spell check
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)

  ;; This hook correctly modifies the \Inbox and \Starred flags on email when they are marked.
  ;; Without it refiling (archiving) and flagging (starring) email won't properly result in
  ;; the corresponding gmail action.
  (add-hook 'mu4e-mark-execute-pre-hook
	    (lambda (mark msg)
	      (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox"))
		    ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
		    ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred")))))
  
  ;;email signature
  (setq mu4e-compose-signature
          (concat
            "Gaurav Srivastava\n"
            "Associate Professor, Civil Engineering, IITGN\n"
          )
  )

  ;; bookmarks for common searches 
  (setq mu4e-actions-tags-header "X-Keywords")
  (setq mu4e-bookmarks '(("tag:\\\\Inbox" "Inbox" ?i)
			                   ("flag:unread" "Unread messages" ?u)
			                   ("date:today..now" "Today's messages" ?t)
			                   ("date:7d..now" "Last 7 days" ?w)
			                   ("mime:image/*" "Messages with images" ?p)))

  ;;----------------------------------------------
  ;;SMTP configuration
  ;;----------------------------------------------
  (require 'smtpmail)
  (setq smtpmail-smtp-server "smtp.gmail.com"
        send-mail-function 'smtpmail-send-it
        message-send-mail-function 'smtpmail-send-it
        smtpmail-starttls-credentials '(("smtp.gmail.com" "587" nil nil))
        smtpmail-auth-credentials '(expand-file-name "~/.authinfo")
        smtpmail-smtp-service 587
        smtpmail-debug-info t
  )

  ;; add Cc and Bcc headers to the message buffer
  (setq message-default-mail-headers "Cc: \nBcc: \n")

  (setq message-kill-buffer-on-exit t)

  ;;----------------------------------------------
  ;;mu4e + org configuration
  ;;----------------------------------------------
  (require 'org-mu4e)
  (setq org-mu4e-link-query-in-headers-mode nil)
	

  ;;----------------------------------------------
  ;;capturing sent-mail in org
  ;;----------------------------------------------
	
))
#+end_src


** Setup notmuch email related things
- Taken from: [[kkatsuyuki.github.io/notmuch-conf]]
#+begin_src emacs-lisp
;; notmuch is to be setup only for non-Windows environments
(require 's)
(if (not (eq 1 1))
;;(if (not (eq system-type 'windows-nt))
  (progn
  (require 'notmuch)

  ;; mail address and use name
  (setq mail-user-agent 'message-user-agent)
  (setq user-mail-address "gauravs@iitgn.ac.in"
        user-full-name "Gaurav Srivastava")

  ;;----------------------------------------------
  ;;notmuch configuration
  ;;----------------------------------------------
  (setq notmuch-search-oldest-first nil
        notmuch-fcc-dirs "~/Maildir/gauravs/[Gmail].Sent Mail"
        notmuch-mua-compose-in 'new-frame
  )

  ;;----------------------------------------------
  ;;SMTP configuration
  ;;----------------------------------------------
  (require 'smtpmail)
  (setq smtpmail-smtp-server "smtp.gmail.com"
        send-mail-function 'smtpmail-send-it
        message-send-mail-function 'smtpmail-send-it
        smtpmail-starttls-credentials '(("smtp.gmail.com" "587" nil nil))
        smtpmail-auth-credentials '(expand-file-name "~/.authinfo")
        smtpmail-smtp-service 587
        smtpmail-debug-info t
  )

  ;; add Cc and Bcc headers to the message buffer
  (setq message-default-mail-headers "Cc: \nBcc: \n")

  ;; postponed messages be put in draft directory
  (setq message-auto-save-directory "~/Maildir/gauravs/[Gmail].Drafts")
  (setq message-kill-buffer-on-exit t)

  ;; change the directory to store the sent mail
  (setq message-directory "~/Maildir/gauravs")
))
#+end_src

* KEY BINDINGS
- key bindings for org agenda and others
	
#+begin_src emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cq" 'save-buffers-kill-emacs)
(setq org-log-done t)
#+end_src

* Registers for quickly opening certain files
- C-x r j e <reg name> to open
	
#+begin_src emacs-lisp
(set-register ?e (cons 'file "~/.emacs"))
(set-register ?b (cons 'file "~/.bashrc"))
(set-register ?l (cons 'file "~/.ledgerrc"))
(set-register ?E (cons 'file "~/code/dot-config/emacs-config.org"))
(set-register ?I (cons 'file (concat gs-mega-dir "/Notes/000_Inbox.org")))
(set-register ?J (cons 'file (concat gs-mega-dir "/ledger/data/journal.ledger")))
(set-register ?C (cons 'file (concat gs-mega-dir "/bin/gen_cat.csv")))
(set-register ?R (cons 'file (concat gs-google-dir "/lit_repo/all_entries.bib")))
#+end_src

 
